[{"message": "%s: %s", "description": "Used when an unexpected error occurred while building the Astroid  representation. This is usually accompanied by a traceback. Please report such errors !", "correct_code": null, "problematic_code": null, "name": "astroid-error", "id": "F0002", "category": "fatal", "href": "https://pylint.pycqa.org/en/latest/messages/fatal/astroid-error.html"}, {"message": "error while parsing the configuration: %s", "description": "Used when an exception occurred while parsing a pylint configuration file.", "correct_code": null, "problematic_code": null, "name": "config-parse-error", "id": "F0011", "category": "fatal", "href": "https://pylint.pycqa.org/en/latest/messages/fatal/config-parse-error.html"}, {"message": "%s", "description": "Used when an error occurred preventing the analysis of a               module (unable to find it for instance).", "correct_code": null, "problematic_code": null, "name": "fatal", "id": "F0001", "category": "fatal", "href": "https://pylint.pycqa.org/en/latest/messages/fatal/fatal.html"}, {"message": "Unable to check methods signature (%s / %s)", "description": "Used when Pylint has been unable to check methods signature compatibility for an unexpected reason. Please report this kind if you don't make sense of it.", "correct_code": null, "problematic_code": null, "name": "method-check-failed", "id": "F0202", "category": "fatal", "href": "https://pylint.pycqa.org/en/latest/messages/fatal/method-check-failed.html"}, {"message": "error while code parsing: %s", "description": "Used when an exception occurred while building the Astroid representation which could be handled by astroid.", "correct_code": null, "problematic_code": null, "name": "parse-error", "id": "F0010", "category": "fatal", "href": "https://pylint.pycqa.org/en/latest/messages/fatal/parse-error.html"}, {"message": "Abstract class %r with abstract methods instantiated", "description": "Used when an abstract class with `abc.ABCMeta` as metaclass has abstract methods and is instantiated.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">abc</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Animal</span><span class=\"p\">(</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">ABC</span><span class=\"p\">):</span>\n    <span class=\"nd\">@abc</span><span class=\"o\">.</span><span class=\"n\">abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">make_sound</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Sheep</span><span class=\"p\">(</span><span class=\"n\">Animal</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">make_sound</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"bhaaaaa\"</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">sheep</span> <span class=\"o\">=</span> <span class=\"n\">Sheep</span><span class=\"p\">()</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">abc</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Animal</span><span class=\"p\">(</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">ABC</span><span class=\"p\">):</span>\n    <span class=\"nd\">@abc</span><span class=\"o\">.</span><span class=\"n\">abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">make_sound</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"n\">sheep</span> <span class=\"o\">=</span> <span class=\"n\">Animal</span><span class=\"p\">()</span>  <span class=\"c1\"># [abstract-class-instantiated]</span>\n</pre></div>", "name": "abstract-class-instantiated", "id": "E0110", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/abstract-class-instantiated.html"}, {"message": "Access to member %r before its definition line %s", "description": "Used when an instance member is accessed before it's actually assigned.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">param</span> <span class=\"o\">=</span> <span class=\"n\">param</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">param</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">param</span><span class=\"p\">:</span>  <span class=\"c1\"># [access-member-before-definition]</span>\n            <span class=\"k\">pass</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">param</span> <span class=\"o\">=</span> <span class=\"n\">param</span>\n</pre></div>", "name": "access-member-before-definition", "id": "E0203", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/access-member-before-definition.html"}, {"message": "Assigning to attribute %r not defined in class slots", "description": "Used when assigning to an attribute not defined in the class slots.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Student</span><span class=\"p\">:</span>\n    <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'surname'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">surname</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">surname</span> <span class=\"o\">=</span> <span class=\"n\">surname</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Student</span><span class=\"p\">:</span>\n    <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">surname</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">surname</span> <span class=\"o\">=</span> <span class=\"n\">surname</span>  <span class=\"c1\"># [assigning-non-slot]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</pre></div>", "name": "assigning-non-slot", "id": "E0237", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/assigning-non-slot.html"}, {"message": "Assigning result of a function call, where the function has no return", "description": "Used when an assignment is done on a function call but the inferred function doesn't return anything.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># [assignment-from-no-return]</span>\n</pre></div>", "name": "assignment-from-no-return", "id": "E1111", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/assignment-from-no-return.html"}, {"message": "Assigning result of a function call, where the function returns None", "description": "Used when an assignment is done on a function call but the inferred function returns nothing but None.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">function</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">function</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">function</span><span class=\"p\">()</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">function</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">function</span><span class=\"p\">()</span>  <span class=\"c1\"># [assignment-from-none]</span>\n</pre></div>", "name": "assignment-from-none", "id": "E1128", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/assignment-from-none.html"}, {"message": "'await' should be used within an async function", "description": "Emitted when await is used outside an async function.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># [await-outside-async]</span>\n</pre></div>", "name": "await-outside-async", "id": "E1142", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/await-outside-async.html"}, {"message": "Out-of-place setting encountered in top level configuration-section '%s' : '%s'", "description": "Used when we detect a setting in the top level of a toml configuration that shouldn't be there.", "correct_code": null, "problematic_code": null, "name": "bad-configuration-section", "id": "E0014", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/bad-configuration-section.html"}, {"message": "Bad except clauses order (%s)", "description": "Used when except clauses are not in the correct order (from the more specific to the more generic). If you don't fix the order, some exceptions may not be caught by the most specific handler.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">()))</span>\n<span class=\"k\">except</span> <span class=\"ne\">TypeError</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">()))</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span>\n<span class=\"k\">except</span> <span class=\"ne\">TypeError</span><span class=\"p\">:</span>  <span class=\"c1\"># [bad-except-order]</span>\n    <span class=\"c1\"># This block cannot be reached since TypeError exception</span>\n    <span class=\"c1\"># is caught by previous exception handler.</span>\n    <span class=\"k\">raise</span>\n</pre></div>", "name": "bad-except-order", "id": "E0701", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/bad-except-order.html"}, {"message": "Exception context set to something which is not an exception, nor None", "description": "Used when using the syntax \"raise ... from ...\", where the exception context is not an exception, nor None.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">divide</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"n\">y</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ZeroDivisionError</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Division by zero when dividing </span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"si\">}</span><span class=\"s2\"> by </span><span class=\"si\">{</span><span class=\"n\">y</span><span class=\"si\">}</span><span class=\"s2\"> !\"</span><span class=\"p\">)</span> <span class=\"kn\">from</span> <span class=\"nn\">exc</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">divide</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"n\">y</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ZeroDivisionError</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Division by zero when dividing </span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"si\">}</span><span class=\"s2\"> by </span><span class=\"si\">{</span><span class=\"n\">y</span><span class=\"si\">}</span><span class=\"s2\"> !\"</span><span class=\"p\">)</span> <span class=\"kn\">from</span> <span class=\"nn\">result</span>  <span class=\"c1\"># [bad-exception-context]</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n</pre></div>", "name": "bad-exception-context", "id": "E0703", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/bad-exception-context.html"}, {"message": "Unsupported format character %r (%#02x) at index %d", "description": "Used when an unsupported format character is used in a format string.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%s</span><span class=\"s2\"> </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"s2\">\"hello\"</span><span class=\"p\">,</span> <span class=\"s2\">\"world\"</span><span class=\"p\">))</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%s</span><span class=\"s2\"> %z\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"s2\">\"hello\"</span><span class=\"p\">,</span> <span class=\"s2\">\"world\"</span><span class=\"p\">))</span>  <span class=\"c1\"># [bad-format-character]</span>\n</pre></div>", "name": "bad-format-character", "id": "E1300", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/bad-format-character.html"}, {"message": "Bad option value for %s", "description": "Used when a bad value for an inline option is encountered.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"c1\"># pylint: disable=missing-module-docstring</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Hello World\"</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"c1\"># pylint: disable=missing-module-documentation  # [bad-option-value]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Hello World\"</span><span class=\"p\">)</span>\n</pre></div>", "name": "bad-option-value", "id": "E0012", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/bad-option-value.html"}, {"message": "Plugin '%s' is impossible to load, is it installed ? ('%s')", "description": "Used when a bad value is used in 'load-plugins'.", "correct_code": null, "problematic_code": null, "name": "bad-plugin-value", "id": "E0013", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/bad-plugin-value.html"}, {"message": "The first reversed() argument is not a sequence", "description": "Used when the first argument to reversed() builtin isn't a sequence (does not implement __reversed__, nor __getitem__ and __len__", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"nb\">reversed</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"nb\">reversed</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">})</span>  <span class=\"c1\"># [bad-reversed-sequence]</span>\n</pre></div>", "name": "bad-reversed-sequence", "id": "E0111", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/bad-reversed-sequence.html"}, {"message": "Suspicious argument in %s.%s call", "description": "The argument to a str.{l,r,}strip call contains a duplicate character,", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"s2\">\"Hello World\"</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s2\">\"Helo\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt;&gt;&gt; ' World'</span>\n<span class=\"s2\">\"abcbc def bacabc\"</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s2\">\"abc \"</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt;&gt;&gt; 'def'</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"s2\">\"Hello World\"</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">)</span>  <span class=\"c1\"># [bad-str-strip-call]</span>\n<span class=\"c1\"># &gt;&gt;&gt; ' World'</span>\n<span class=\"s2\">\"abcbc def bacabc\"</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s2\">\"abcbc \"</span><span class=\"p\">)</span>  <span class=\"c1\"># [bad-str-strip-call]</span>\n<span class=\"c1\"># &gt;&gt;&gt; 'def'</span>\n</pre></div>", "name": "bad-str-strip-call", "id": "E1310", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/bad-str-strip-call.html"}, {"message": "Argument %r does not match format type %r", "description": "Used when a type required by format string is not suitable for actual argument type", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%d</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%d</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"s2\">\"1\"</span><span class=\"p\">)</span>  <span class=\"c1\"># [bad-string-format-type]</span>\n</pre></div>", "name": "bad-string-format-type", "id": "E1307", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/bad-string-format-type.html"}, {"message": "Bad first argument %r given to super()", "description": "Used when another argument than the current class is given as first argument of the super builtin.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Animal</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">(</span><span class=\"n\">Animal</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Animal</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">(</span><span class=\"n\">Animal</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">Animal</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>  <span class=\"c1\"># [bad-super-call]</span>\n</pre></div>", "name": "bad-super-call", "id": "E1003", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/bad-super-call.html"}, {"message": "Contains control characters that can permit obfuscated code executed differently than displayed", "description": "bidirectional unicode are typically not displayed characters required to display right-to-left (RTL) script (i.e. Chinese, Japanese, Arabic, Hebrew, ...) correctly. So can you trust this code? Are you sure it displayed correctly in all editors? If you did not write it or your language is not RTL, remove the special characters, as they could be used to trick you into executing code, that does something else than what it looks like.\nMore Information:\nhttps://en.wikipedia.org/wiki/Bidirectional_text\nhttps://trojansource.codes/", "correct_code": null, "problematic_code": null, "name": "bidirectional-unicode", "id": "E2502", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/bidirectional-unicode.html"}, {"message": "'collections.abc.Callable' inside Optional and Union is broken in 3.9.0 / 3.9.1 (use 'typing.Callable' instead)", "description": "``collections.abc.Callable`` inside Optional and Union is broken in Python 3.9.0 and 3.9.1. Use ``typing.Callable`` for these cases instead. https://bugs.python.org/issue42965", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Optional</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"kc\">None</span><span class=\"p\">]]:</span>\n    <span class=\"o\">...</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">collections.abc</span> <span class=\"kn\">import</span> <span class=\"n\">Callable</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Optional</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"kc\">None</span><span class=\"p\">]]:</span>  <span class=\"c1\"># [broken-collections-callable]</span>\n    <span class=\"o\">...</span>\n</pre></div>", "name": "broken-collections-callable", "id": "E6005", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/broken-collections-callable.html"}, {"message": "'NoReturn' inside compound types is broken in 3.7.0 / 3.7.1", "description": "``typing.NoReturn`` inside compound types is broken in Python 3.7.0 and 3.7.1. If not dependent on runtime introspection, use string annotation instead. E.g. ``Callable[..., 'NoReturn']``. https://bugs.python.org/issue34921", "correct_code": null, "problematic_code": null, "name": "broken-noreturn", "id": "E6004", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/broken-noreturn.html"}, {"message": "Catching an exception which doesn't inherit from Exception: %s", "description": "Used when a class which doesn't inherit from Exception is used as an exception in an except clause.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">FooError</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"mi\">0</span>\n<span class=\"k\">except</span> <span class=\"n\">FooError</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">FooError</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"mi\">0</span>\n<span class=\"k\">except</span> <span class=\"n\">FooError</span><span class=\"p\">:</span>  <span class=\"c1\"># [catching-non-exception]</span>\n    <span class=\"k\">pass</span>\n</pre></div>", "name": "catching-non-exception", "id": "E0712", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/catching-non-exception.html"}, {"message": "Value %r in slots conflicts with class variable", "description": "Used when a value in __slots__ conflicts with a class variable, property or method.", "correct_code": null, "problematic_code": null, "name": "class-variable-slots-conflict", "id": "E0242", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/class-variable-slots-conflict.html"}, {"message": "'continue' not supported inside 'finally' clause", "description": "Emitted when the `continue` keyword is found inside a finally clause, which is a SyntaxError.", "correct_code": null, "problematic_code": null, "name": "continue-in-finally", "id": "E0116", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/continue-in-finally.html"}, {"message": "Unpacking a dictionary in iteration without calling .items()", "description": "Emitted when trying to iterate through a dict without calling .items()", "correct_code": null, "problematic_code": null, "name": "dict-iter-missing-items", "id": "E1141", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/dict-iter-missing-items.html"}, {"message": "Duplicate argument name %s in function definition", "description": "Duplicate argument names in function definitions are syntax errors.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">get_fruits</span><span class=\"p\">(</span><span class=\"n\">apple</span><span class=\"p\">,</span> <span class=\"n\">banana</span><span class=\"p\">,</span> <span class=\"n\">orange</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">get_fruits</span><span class=\"p\">(</span><span class=\"n\">apple</span><span class=\"p\">,</span> <span class=\"n\">banana</span><span class=\"p\">,</span> <span class=\"n\">apple</span><span class=\"p\">):</span>  <span class=\"c1\"># [duplicate-argument-name]</span>\n    <span class=\"k\">pass</span>\n</pre></div>", "name": "duplicate-argument-name", "id": "E0108", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/duplicate-argument-name.html"}, {"message": "Duplicate bases for class %r", "description": "Duplicate use of base classes in derived classes raise TypeErrors.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Animal</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Bird</span><span class=\"p\">(</span><span class=\"n\">Animal</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">(</span><span class=\"n\">Animal</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Animal</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">(</span><span class=\"n\">Animal</span><span class=\"p\">,</span> <span class=\"n\">Animal</span><span class=\"p\">):</span>  <span class=\"c1\"># [duplicate-bases]</span>\n    <span class=\"k\">pass</span>\n</pre></div>", "name": "duplicate-bases", "id": "E0241", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/duplicate-bases.html"}, {"message": "Expected mapping for format string, not %s", "description": "Used when a format string that uses named conversion specifiers is used with an argument that is not a mapping.", "correct_code": null, "problematic_code": null, "name": "format-needs-mapping", "id": "E1303", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/format-needs-mapping.html"}, {"message": "%s already defined line %s", "description": "Used when a function / class / method is redefined.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">get_email</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">get_email</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_email</span><span class=\"p\">():</span>  <span class=\"c1\"># [function-redefined]</span>\n    <span class=\"k\">pass</span>\n</pre></div>", "name": "function-redefined", "id": "E0102", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/function-redefined.html"}, {"message": "Unable to import %s", "description": "Used when pylint has been unable to import a module.", "correct_code": null, "problematic_code": null, "name": "import-error", "id": "E0401", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/import-error.html"}, {"message": "Inconsistent method resolution order for class %r", "description": "Used when a class has an inconsistent method resolution order.", "correct_code": null, "problematic_code": null, "name": "inconsistent-mro", "id": "E0240", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/inconsistent-mro.html"}, {"message": "Inheriting %r, which is not a class.", "description": "Used when a class inherits from something which is not a class.", "correct_code": null, "problematic_code": null, "name": "inherit-non-class", "id": "E0239", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/inherit-non-class.html"}, {"message": "__init__ method is a generator", "description": "Used when the special class method __init__ is turned into a generator by a yield in its body.", "correct_code": null, "problematic_code": null, "name": "init-is-generator", "id": "E0100", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/init-is-generator.html"}, {"message": "Invalid format for __all__, must be tuple or list", "description": "Used when __all__ has an invalid format.", "correct_code": null, "problematic_code": null, "name": "invalid-all-format", "id": "E0605", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-all-format.html"}, {"message": "Invalid object %r in __all__, must contain only strings", "description": "Used when an invalid (non-string) object occurs in __all__.", "correct_code": null, "problematic_code": null, "name": "invalid-all-object", "id": "E0604", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-all-object.html"}, {"message": "__bool__ does not return bool", "description": "Used when a __bool__ method returns something which is not a bool", "correct_code": null, "problematic_code": null, "name": "invalid-bool-returned", "id": "E0304", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-bool-returned.html"}, {"message": "__bytes__ does not return bytes", "description": "Used when a __bytes__ method returns something which is not bytes", "correct_code": null, "problematic_code": null, "name": "invalid-bytes-returned", "id": "E0308", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-bytes-returned.html"}, {"message": "Invalid unescaped character backspace, use \"b\" instead.", "description": "Moves the cursor back, so the character after it will overwrite the character before.", "correct_code": null, "problematic_code": null, "name": "invalid-character-backspace", "id": "E2510", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-character-backspace.html"}, {"message": "Invalid unescaped character carriage-return, use \"r\" instead.", "description": "Moves the cursor to the start of line, subsequent characters overwrite the start of the line.", "correct_code": null, "problematic_code": null, "name": "invalid-character-carriage-return", "id": "E2511", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-character-carriage-return.html"}, {"message": "Invalid unescaped character esc, use \"x1B\" instead.", "description": "Commonly initiates escape codes which allow arbitrary control of the terminal.", "correct_code": null, "problematic_code": null, "name": "invalid-character-esc", "id": "E2513", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-character-esc.html"}, {"message": "Invalid unescaped character nul, use \"0\" instead.", "description": "Mostly end of input for python.", "correct_code": null, "problematic_code": null, "name": "invalid-character-nul", "id": "E2514", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-character-nul.html"}, {"message": "Invalid unescaped character sub, use \"x1A\" instead.", "description": "Ctrl+Z \"End of text\" on Windows. Some programs (such as type) ignore the rest of the file after it.", "correct_code": null, "problematic_code": null, "name": "invalid-character-sub", "id": "E2512", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-character-sub.html"}, {"message": "Invalid unescaped character zero-width-space, use \"u200B\" instead.", "description": "Invisible space character could hide real code execution.", "correct_code": null, "problematic_code": null, "name": "invalid-character-zero-width-space", "id": "E2515", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-character-zero-width-space.html"}, {"message": "Invalid __class__ object", "description": "Used when an invalid object is assigned to a __class__ property. Only a class is permitted.", "correct_code": null, "problematic_code": null, "name": "invalid-class-object", "id": "E0243", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-class-object.html"}, {"message": "Extending inherited Enum class \"%s\"", "description": "Used when a class tries to extend an inherited Enum class. Doing so will raise a TypeError at runtime.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">enum</span> <span class=\"kn\">import</span> <span class=\"n\">Enum</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Color</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n    <span class=\"n\">ORANGE</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">CHERRY</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Fruit</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n    <span class=\"n\">ORANGE</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">CHERRY</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"n\">APPLE</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">enum</span> <span class=\"kn\">import</span> <span class=\"n\">Enum</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Color</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n    <span class=\"n\">ORANGE</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">CHERRY</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Fruit</span><span class=\"p\">(</span><span class=\"n\">Color</span><span class=\"p\">):</span>  <span class=\"c1\"># [invalid-enum-extension]</span>\n    <span class=\"n\">APPLE</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n</pre></div>", "name": "invalid-enum-extension", "id": "E0244", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-enum-extension.html"}, {"message": "%s does not support %s type argument", "description": "Env manipulation functions support only string type arguments. See https://docs.python.org/3/library/os.html#os.getenv.", "correct_code": null, "problematic_code": null, "name": "invalid-envvar-value", "id": "E1507", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-envvar-value.html"}, {"message": "__format__ does not return str", "description": "Used when a __format__ method returns something which is not a string", "correct_code": null, "problematic_code": null, "name": "invalid-format-returned", "id": "E0311", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-format-returned.html"}, {"message": "__getnewargs_ex__ does not return a tuple containing (tuple, dict)", "description": "Used when a __getnewargs_ex__ method returns something which is not of the form tuple(tuple, dict)", "correct_code": null, "problematic_code": null, "name": "invalid-getnewargs-ex-returned", "id": "E0313", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-getnewargs-ex-returned.html"}, {"message": "__getnewargs__ does not return a tuple", "description": "Used when a __getnewargs__ method returns something which is not a tuple", "correct_code": null, "problematic_code": null, "name": "invalid-getnewargs-returned", "id": "E0312", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-getnewargs-returned.html"}, {"message": "__hash__ does not return int", "description": "Used when a __hash__ method returns something which is not an integer", "correct_code": null, "problematic_code": null, "name": "invalid-hash-returned", "id": "E0309", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-hash-returned.html"}, {"message": "__index__ does not return int", "description": "Used when an __index__ method returns something which is not an integer", "correct_code": null, "problematic_code": null, "name": "invalid-index-returned", "id": "E0305", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-index-returned.html"}, {"message": "__length_hint__ does not return non-negative integer", "description": "Used when a __length_hint__ method returns something which is not a non-negative integer", "correct_code": null, "problematic_code": null, "name": "invalid-length-hint-returned", "id": "E0310", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-length-hint-returned.html"}, {"message": "__len__ does not return non-negative integer", "description": "Used when a __len__ method returns something which is not a non-negative integer", "correct_code": null, "problematic_code": null, "name": "invalid-length-returned", "id": "E0303", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-length-returned.html"}, {"message": "Invalid metaclass %r used", "description": "Emitted whenever we can detect that a class is using, as a metaclass, something which might be invalid for using as a metaclass.", "correct_code": null, "problematic_code": null, "name": "invalid-metaclass", "id": "E1139", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-metaclass.html"}, {"message": "__repr__ does not return str", "description": "Used when a __repr__ method returns something which is not a string", "correct_code": null, "problematic_code": null, "name": "invalid-repr-returned", "id": "E0306", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-repr-returned.html"}, {"message": "Sequence index is not an int, slice, or instance with __index__", "description": "Used when a sequence type is indexed with an invalid type. Valid types are ints, slices, and objects with an __index__ method.", "correct_code": null, "problematic_code": null, "name": "invalid-sequence-index", "id": "E1126", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-sequence-index.html"}, {"message": "Slice index is not an int, None, or instance with __index__", "description": "Used when a slice index is not an integer, None, or an object with an __index__ method.", "correct_code": null, "problematic_code": null, "name": "invalid-slice-index", "id": "E1127", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-slice-index.html"}, {"message": "Invalid __slots__ object", "description": "Used when an invalid __slots__ is found in class. Only a string, an iterable or a sequence is permitted.", "correct_code": null, "problematic_code": null, "name": "invalid-slots", "id": "E0238", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-slots.html"}, {"message": "Invalid object %r in __slots__, must contain only non empty strings", "description": "Used when an invalid (non-string) object occurs in __slots__.", "correct_code": null, "problematic_code": null, "name": "invalid-slots-object", "id": "E0236", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-slots-object.html"}, {"message": "Starred assignment target must be in a list or tuple", "description": "Emitted when a star expression is used as a starred assignment target.", "correct_code": null, "problematic_code": null, "name": "invalid-star-assignment-target", "id": "E0113", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-star-assignment-target.html"}, {"message": "__str__ does not return str", "description": "Used when a __str__ method returns something which is not a string", "correct_code": null, "problematic_code": null, "name": "invalid-str-returned", "id": "E0307", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-str-returned.html"}, {"message": "%s", "description": "Emitted when a unary operand is used on an object which does not support this type of operation.", "correct_code": null, "problematic_code": null, "name": "invalid-unary-operand-type", "id": "E1130", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-unary-operand-type.html"}, {"message": "UTF-16 and UTF-32 aren't backward compatible. Use UTF-8 instead", "description": "For compatibility use UTF-8 instead of UTF-16/UTF-32. See also https://bugs.python.org/issue1503789 for a history of this issue. And https://softwareengineering.stackexchange.com/questions/102205/should-utf-16-be-considered-harmful for some possible problems when using UTF-16 for instance.", "correct_code": null, "problematic_code": null, "name": "invalid-unicode-codec", "id": "E2501", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/invalid-unicode-codec.html"}, {"message": "Logging format string ends in middle of conversion specifier", "description": "Used when a logging statement format string terminates before the end of a conversion specifier.", "correct_code": null, "problematic_code": null, "name": "logging-format-truncated", "id": "E1201", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/logging-format-truncated.html"}, {"message": "Not enough arguments for logging format string", "description": "Used when a logging format string is given too few arguments.", "correct_code": null, "problematic_code": null, "name": "logging-too-few-args", "id": "E1206", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/logging-too-few-args.html"}, {"message": "Too many arguments for logging format string", "description": "Used when a logging format string is given too many arguments.", "correct_code": null, "problematic_code": null, "name": "logging-too-many-args", "id": "E1205", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/logging-too-many-args.html"}, {"message": "Unsupported logging format character %r (%#02x) at index %d", "description": "Used when an unsupported format character is used in a logging statement format string.", "correct_code": null, "problematic_code": null, "name": "logging-unsupported-format", "id": "E1200", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/logging-unsupported-format.html"}, {"message": "An attribute defined in %s line %s hides this method", "description": "Used when a class defines a method which is hidden by an instance attribute from an ancestor class or set by some client code.", "correct_code": null, "problematic_code": null, "name": "method-hidden", "id": "E0202", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/method-hidden.html"}, {"message": "The raise statement is not inside an except clause", "description": "Used when a bare raise is not used inside an except clause. This generates an error, since there are no active exceptions to be reraised. An exception to this rule is represented by a bare raise inside a finally clause, which might work, as long as an exception is raised inside the try block, but it is nevertheless a code smell that must not be relied upon.", "correct_code": null, "problematic_code": null, "name": "misplaced-bare-raise", "id": "E0704", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/misplaced-bare-raise.html"}, {"message": "format function is not called on str", "description": "Emitted when format function is not called on str object. e.g doing print(\"value: {}\").format(123) instead of print(\"value: {}\".format(123)). This might not be what the user intended to do.", "correct_code": null, "problematic_code": null, "name": "misplaced-format-function", "id": "E0119", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/misplaced-format-function.html"}, {"message": "Missing key %r in format string dictionary", "description": "Used when a format string that uses named conversion specifiers is used with a dictionary that doesn't contain all the keys required by the format string.", "correct_code": null, "problematic_code": null, "name": "missing-format-string-key", "id": "E1304", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/missing-format-string-key.html"}, {"message": "Missing mandatory keyword argument %r in %s call", "description": "Used when a function call does not pass a mandatory keyword-only argument.", "correct_code": null, "problematic_code": null, "name": "missing-kwoa", "id": "E1125", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/missing-kwoa.html"}, {"message": "Mixing named and unnamed conversion specifiers in format string", "description": "Used when a format string contains both named (e.g. '%(foo)d') and unnamed (e.g. '%d') conversion specifiers.  This is also used when a named conversion specifier contains * for the minimum field width and/or precision.", "correct_code": null, "problematic_code": null, "name": "mixed-format-string", "id": "E1302", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/mixed-format-string.html"}, {"message": "Iterated dict '%s' is being modified inside for loop body, iterate through a copy of it instead.", "description": "Emitted when items are added or removed to a dict being iterated through. Doing so raises a RuntimeError.", "correct_code": null, "problematic_code": null, "name": "modified-iterating-dict", "id": "E4702", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/modified-iterating-dict.html"}, {"message": "Iterated set '%s' is being modified inside for loop body, iterate through a copy of it instead.", "description": "Emitted when items are added or removed to a set being iterated through. Doing so raises a RuntimeError.", "correct_code": null, "problematic_code": null, "name": "modified-iterating-set", "id": "E4703", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/modified-iterating-set.html"}, {"message": "%s %r has no %r member%s", "description": "Used when a variable is accessed for a nonexistent member.", "correct_code": null, "problematic_code": null, "name": "no-member", "id": "E1101", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/no-member.html"}, {"message": "Method has no argument", "description": "Used when a method which should have the bound instance as first argument has no argument defined.", "correct_code": null, "problematic_code": null, "name": "no-method-argument", "id": "E0211", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/no-method-argument.html"}, {"message": "No name %r in module %r", "description": "Used when a name cannot be found in a module.", "correct_code": null, "problematic_code": null, "name": "no-name-in-module", "id": "E0611", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/no-name-in-module.html"}, {"message": "Method should have \"self\" as first argument", "description": "Used when a method has an attribute different the \"self\" as first argument. This is considered as an error since this is a so common convention that you shouldn't break it!", "correct_code": null, "problematic_code": null, "name": "no-self-argument", "id": "E0213", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/no-self-argument.html"}, {"message": "No value for argument %s in %s call", "description": "Used when a function call passes too few arguments.", "correct_code": null, "problematic_code": null, "name": "no-value-for-parameter", "id": "E1120", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/no-value-for-parameter.html"}, {"message": "__iter__ returns non-iterator", "description": "Used when an __iter__ method returns something which is not an iterable (i.e. has no `__next__` method)", "correct_code": null, "problematic_code": null, "name": "non-iterator-returned", "id": "E0301", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/non-iterator-returned.html"}, {"message": "Use of the non-existent %s operator", "description": "Used when you attempt to use the C-style pre-increment or pre-decrement operator -- and ++, which doesn't exist in Python.", "correct_code": null, "problematic_code": null, "name": "nonexistent-operator", "id": "E0107", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/nonexistent-operator.html"}, {"message": "Name %r is nonlocal and global", "description": "Emitted when a name is both nonlocal and global.", "correct_code": null, "problematic_code": null, "name": "nonlocal-and-global", "id": "E0115", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/nonlocal-and-global.html"}, {"message": "nonlocal name %s found without binding", "description": "Emitted when a nonlocal variable does not have an attached name somewhere in the parent scopes", "correct_code": null, "problematic_code": null, "name": "nonlocal-without-binding", "id": "E0117", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/nonlocal-without-binding.html"}, {"message": "Non-mapping value %s is used in a mapping context", "description": "Used when a non-mapping value is used in place where mapping is expected", "correct_code": null, "problematic_code": null, "name": "not-a-mapping", "id": "E1134", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/not-a-mapping.html"}, {"message": "Non-iterable value %s is used in an iterating context", "description": "Used when a non-iterable value is used in place where iterable is expected", "correct_code": null, "problematic_code": null, "name": "not-an-iterable", "id": "E1133", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/not-an-iterable.html"}, {"message": "Async context manager '%s' doesn't implement __aenter__ and __aexit__.", "description": "Used when an async context manager is used with an object that does not implement the async context management protocol.", "correct_code": null, "problematic_code": null, "name": "not-async-context-manager", "id": "E1701", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/not-async-context-manager.html"}, {"message": "%s is not callable", "description": "Used when an object being called has been inferred to a non callable object.", "correct_code": null, "problematic_code": null, "name": "not-callable", "id": "E1102", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/not-callable.html"}, {"message": "Context manager '%s' doesn't implement __enter__ and __exit__.", "description": "Used when an instance in a with statement doesn't implement the context manager protocol(__enter__/__exit__).", "correct_code": null, "problematic_code": null, "name": "not-context-manager", "id": "E1129", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/not-context-manager.html"}, {"message": "%r not properly in loop", "description": "Used when break or continue keywords are used outside a loop.", "correct_code": null, "problematic_code": null, "name": "not-in-loop", "id": "E0103", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/not-in-loop.html"}, {"message": "NotImplemented raised - should raise NotImplementedError", "description": "Used when NotImplemented is raised instead of NotImplementedError", "correct_code": null, "problematic_code": null, "name": "notimplemented-raised", "id": "E0711", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/notimplemented-raised.html"}, {"message": "Invalid index for iterable length", "description": "Emitted when an index used on an iterable goes beyond the length of that iterable.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">])</span>  <span class=\"c1\"># [potential-index-error]</span>\n</pre></div>", "name": "potential-index-error", "id": "E0643", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/potential-index-error.html"}, {"message": "Raising %s while only classes or instances are allowed", "description": "Used when something which is neither a class nor an instance is raised (i.e. a `TypeError` will be raised).", "correct_code": null, "problematic_code": null, "name": "raising-bad-type", "id": "E0702", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/raising-bad-type.html"}, {"message": "Raising a new style class which doesn't inherit from BaseException", "description": "Used when a new style class which doesn't inherit from BaseException is raised.", "correct_code": null, "problematic_code": null, "name": "raising-non-exception", "id": "E0710", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/raising-non-exception.html"}, {"message": "Argument %r passed by position and keyword in %s call", "description": "Used when a function call would result in assigning multiple values to a function parameter, one value from a positional argument and one from a keyword argument.", "correct_code": null, "problematic_code": null, "name": "redundant-keyword-arg", "id": "E1124", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/redundant-keyword-arg.html"}, {"message": "Attempted relative import beyond top-level package", "description": "Used when a relative import tries to access too many levels in the current package.", "correct_code": null, "problematic_code": null, "name": "relative-beyond-top-level", "id": "E0402", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/relative-beyond-top-level.html"}, {"message": "Got multiple values for keyword argument %r in function call", "description": "Emitted when a function call got multiple values for a keyword.", "correct_code": null, "problematic_code": null, "name": "repeated-keyword", "id": "E1132", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/repeated-keyword.html"}, {"message": "Return with argument inside generator", "description": "Used when a \"return\" statement with an argument is found outside in a generator function or method (e.g. with some \"yield\" statements).", "correct_code": null, "problematic_code": null, "name": "return-arg-in-generator", "id": "E0106", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/return-arg-in-generator.html"}, {"message": "Explicit return in __init__", "description": "Used when the special class method __init__ has an explicit return value.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Sum</span><span class=\"p\">:</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Sum</span><span class=\"p\">:</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>  <span class=\"c1\"># [return-in-init]</span>\n        <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</pre></div>", "name": "return-in-init", "id": "E0101", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/return-in-init.html"}, {"message": "Return outside function", "description": "Used when a \"return\" statement is found outside a function or method.", "correct_code": null, "problematic_code": null, "name": "return-outside-function", "id": "E0104", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/return-outside-function.html"}, {"message": "Can use starred expression only in assignment target", "description": "Emitted when a star expression is not used in an assignment target.", "correct_code": null, "problematic_code": null, "name": "star-needs-assignment-target", "id": "E0114", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/star-needs-assignment-target.html"}, {"message": "%s", "description": "Used when a syntax error is raised for a module.", "correct_code": null, "problematic_code": null, "name": "syntax-error", "id": "E0001", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/syntax-error.html"}, {"message": "Not enough arguments for format string", "description": "Used when a format string that uses unnamed conversion specifiers is given too few arguments", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Today is </span><span class=\"si\">{0}</span><span class=\"s2\">, so tomorrow will be </span><span class=\"si\">{1}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s2\">\"Monday\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Tuesday\"</span><span class=\"p\">))</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Today is </span><span class=\"si\">{0}</span><span class=\"s2\">, so tomorrow will be </span><span class=\"si\">{1}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s2\">\"Monday\"</span><span class=\"p\">))</span>  <span class=\"c1\"># [too-few-format-args]</span>\n</pre></div>", "name": "too-few-format-args", "id": "E1306", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/too-few-format-args.html"}, {"message": "Too many arguments for format string", "description": "Used when a format string that uses unnamed conversion specifiers is given too many arguments.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Today is </span><span class=\"si\">{0}</span><span class=\"s2\">, so tomorrow will be </span><span class=\"si\">{1}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s2\">\"Monday\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Tuesday\"</span><span class=\"p\">))</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Today is </span><span class=\"si\">{0}</span><span class=\"s2\">, so tomorrow will be </span><span class=\"si\">{1}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s2\">\"Monday\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Tuesday\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Wednesday\"</span><span class=\"p\">))</span>  <span class=\"c1\"># [too-many-format-args]</span>\n</pre></div>", "name": "too-many-format-args", "id": "E1305", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/too-many-format-args.html"}, {"message": "Too many positional arguments for %s call", "description": "Used when a function call passes too many positional arguments.", "correct_code": null, "problematic_code": null, "name": "too-many-function-args", "id": "E1121", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/too-many-function-args.html"}, {"message": "More than one starred expression in assignment", "description": "Emitted when there are more than one starred expressions (`*x`) in an assignment. This is a SyntaxError.", "correct_code": null, "problematic_code": null, "name": "too-many-star-expressions", "id": "E0112", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/too-many-star-expressions.html"}, {"message": "Format string ends in middle of conversion specifier", "description": "Used when a format string terminates before the end of a conversion specifier.", "correct_code": null, "problematic_code": null, "name": "truncated-format-string", "id": "E1301", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/truncated-format-string.html"}, {"message": "Undefined variable name %r in __all__", "description": "Used when an undefined variable name is referenced in __all__.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"get_fruit_color\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_fruit_color</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"get_fruit_colour\"</span><span class=\"p\">]</span>  <span class=\"c1\"># [undefined-all-variable]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_fruit_color</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n</pre></div>", "name": "undefined-all-variable", "id": "E0603", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/undefined-all-variable.html"}, {"message": "Undefined variable %r", "description": "Used when an undefined variable is accessed.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">number</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">number</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># [undefined-variable]</span>\n</pre></div>", "name": "undefined-variable", "id": "E0602", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/undefined-variable.html"}, {"message": "Unexpected keyword argument %r in %s call", "description": "Used when a function call passes a keyword argument that doesn't correspond to one of the function's parameter names.", "correct_code": null, "problematic_code": null, "name": "unexpected-keyword-arg", "id": "E1123", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/unexpected-keyword-arg.html"}, {"message": "The special method %r expects %s param(s), %d %s given", "description": "Emitted when a special method was defined with an invalid number of parameters. If it has too few or too many, it might not work at all.", "correct_code": null, "problematic_code": null, "name": "unexpected-special-method-signature", "id": "E0302", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/unexpected-special-method-signature.html"}, {"message": "Dict key is unhashable", "description": "Emitted when a dict key is not hashable (i.e. doesn't define __hash__ method).", "correct_code": null, "problematic_code": null, "name": "unhashable-dict-key", "id": "E1140", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/unhashable-dict-key.html"}, {"message": "Attempting to unpack a non-sequence%s", "description": "Used when something which is not a sequence is used in an unpack assignment", "correct_code": null, "problematic_code": null, "name": "unpacking-non-sequence", "id": "E0633", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/unpacking-non-sequence.html"}, {"message": "Unrecognized file option %r", "description": "Used when an unknown inline option is encountered.", "correct_code": null, "problematic_code": null, "name": "unrecognized-inline-option", "id": "E0011", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/unrecognized-inline-option.html"}, {"message": "Unrecognized option found: %s", "description": "Used when we detect an option that we do not recognize.", "correct_code": null, "problematic_code": null, "name": "unrecognized-option", "id": "E0015", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/unrecognized-option.html"}, {"message": "Value '%s' is unsubscriptable", "description": "Emitted when a subscripted value doesn't support subscription (i.e. doesn't define __getitem__ method or __class_getitem__ for a class).", "correct_code": null, "problematic_code": null, "name": "unsubscriptable-object", "id": "E1136", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/unsubscriptable-object.html"}, {"message": "%r does not support item assignment", "description": "Emitted when an object does not support item assignment (i.e. doesn't define __setitem__ method).", "correct_code": null, "problematic_code": null, "name": "unsupported-assignment-operation", "id": "E1137", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/unsupported-assignment-operation.html"}, {"message": "%s", "description": "Emitted when a binary arithmetic operation between two operands is not supported.", "correct_code": null, "problematic_code": null, "name": "unsupported-binary-operation", "id": "E1131", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/unsupported-binary-operation.html"}, {"message": "%r does not support item deletion", "description": "Emitted when an object does not support item deletion (i.e. doesn't define __delitem__ method).", "correct_code": null, "problematic_code": null, "name": "unsupported-delete-operation", "id": "E1138", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/unsupported-delete-operation.html"}, {"message": "Value '%s' doesn't support membership test", "description": "Emitted when an instance in membership test expression doesn't implement membership protocol (__contains__/__iter__/__getitem__).", "correct_code": null, "problematic_code": null, "name": "unsupported-membership-test", "id": "E1135", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/unsupported-membership-test.html"}, {"message": "Using variable %r before assignment", "description": "Emitted when a local variable is accessed before its assignment took place. Assignments in try blocks are assumed not to have occurred when evaluating associated except/finally blocks. Assignments in except blocks are assumed not to have occurred when evaluating statements outside the block, except when the associated try block contains a return statement.", "correct_code": null, "problematic_code": null, "name": "used-before-assignment", "id": "E0601", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/used-before-assignment.html"}, {"message": "Name %r is used prior to global declaration", "description": "Emitted when a name is used prior a global declaration, which results in an error since Python 3.6.", "correct_code": null, "problematic_code": null, "name": "used-prior-global-declaration", "id": "E0118", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/used-prior-global-declaration.html"}, {"message": "Yield inside async function", "description": "Used when an `yield` or `yield from` statement is found inside an async function.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_inner_foo</span><span class=\"p\">():</span>\n        <span class=\"k\">yield from</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"k\">yield</span> <span class=\"mi\">42</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"k\">yield from</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>  <span class=\"c1\"># [yield-inside-async-function]</span>\n</pre></div>", "name": "yield-inside-async-function", "id": "E1700", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/yield-inside-async-function.html"}, {"message": "Yield outside function", "description": "Used when a \"yield\" statement is found outside a function or method.", "correct_code": null, "problematic_code": null, "name": "yield-outside-function", "id": "E0105", "category": "error", "href": "https://pylint.pycqa.org/en/latest/messages/error/yield-outside-function.html"}, {"message": "Method %r is abstract in class %r but is not overridden", "description": "Used when an abstract method (i.e. raise NotImplementedError) is not overridden in concrete class.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Pet</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">make_sound</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">(</span><span class=\"n\">Pet</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">make_sound</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Meeeow\"</span><span class=\"p\">)</span>\n\n\n<span class=\"kn\">import</span> <span class=\"nn\">abc</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">WildAnimal</span><span class=\"p\">:</span>\n    <span class=\"nd\">@abc</span><span class=\"o\">.</span><span class=\"n\">abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">make_sound</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Panther</span><span class=\"p\">(</span><span class=\"n\">WildAnimal</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">make_sound</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"MEEEOW\"</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Pet</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">make_sound</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">(</span><span class=\"n\">Pet</span><span class=\"p\">):</span>  <span class=\"c1\"># [abstract-method]</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"kn\">import</span> <span class=\"nn\">abc</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">WildAnimal</span><span class=\"p\">:</span>\n    <span class=\"nd\">@abc</span><span class=\"o\">.</span><span class=\"n\">abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">make_sound</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Panther</span><span class=\"p\">(</span><span class=\"n\">WildAnimal</span><span class=\"p\">):</span>  <span class=\"c1\"># [abstract-method]</span>\n    <span class=\"k\">pass</span>\n</pre></div>", "name": "abstract-method", "id": "W0223", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/abstract-method.html"}, {"message": "Anomalous backslash in string: '%s'. String constant might be missing an r prefix.", "description": "Used when a backslash is in a literal string but not as an escape.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s2\">\"\\z\"</span>\n<span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"s2\">\"\\z\"</span>  <span class=\"c1\"># [anomalous-backslash-in-string]</span>\n</pre></div>", "name": "anomalous-backslash-in-string", "id": "W1401", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/anomalous-backslash-in-string.html"}, {"message": "Anomalous Unicode escape in byte string: '%s'. String constant might be missing an r or u prefix.", "description": "Used when an escape like u is encountered in a byte string where it has no effect.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"</span><span class=\"se\">\\\\</span><span class=\"s2\">u</span><span class=\"si\">{0}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s2\">\"0394\"</span><span class=\"p\">))</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"\\u</span><span class=\"si\">{0}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s2\">\"0394\"</span><span class=\"p\">))</span>  <span class=\"c1\"># [anomalous-unicode-escape-in-string]</span>\n</pre></div>", "name": "anomalous-unicode-escape-in-string", "id": "W1402", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/anomalous-unicode-escape-in-string.html"}, {"message": "%s %s %r method", "description": "Used when a method has a different number of arguments than in the implemented interface or in an overridden method. Extra arguments with default values are ignored.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Drink</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">mix</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">fluid_one</span><span class=\"p\">,</span> <span class=\"n\">fluid_two</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">fluid_one</span> <span class=\"o\">+</span> <span class=\"n\">fluid_two</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Cocktail</span><span class=\"p\">(</span><span class=\"n\">Drink</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">mix</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">fluid_one</span><span class=\"p\">,</span> <span class=\"n\">fluid_two</span><span class=\"p\">,</span> <span class=\"n\">alcoholic_fluid_one</span><span class=\"o\">=</span><span class=\"s2\">\"Beer\"</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">fluid_one</span> <span class=\"o\">+</span> <span class=\"n\">fluid_two</span> <span class=\"o\">+</span> <span class=\"n\">alcoholic_fluid_one</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Car</span><span class=\"p\">:</span>\n    <span class=\"n\">tank</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">fill_tank</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">gas</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tank</span> <span class=\"o\">+=</span> <span class=\"n\">gas</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Airplane</span><span class=\"p\">:</span>\n    <span class=\"n\">tank</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">kerosene_tank</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">fill_tank</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">gas</span><span class=\"p\">,</span> <span class=\"n\">kerosene</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tank</span> <span class=\"o\">+=</span> <span class=\"n\">gas</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">kerosene_tank</span> <span class=\"o\">+=</span> <span class=\"n\">kerosene</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Drink</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">mix</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">fluid_one</span><span class=\"p\">,</span> <span class=\"n\">fluid_two</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">fluid_one</span> <span class=\"o\">+</span> <span class=\"n\">fluid_two</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Cocktail</span><span class=\"p\">(</span><span class=\"n\">Drink</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">mix</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">fluid_one</span><span class=\"p\">,</span> <span class=\"n\">fluid_two</span><span class=\"p\">,</span> <span class=\"n\">alcoholic_fluid_one</span><span class=\"p\">):</span>  <span class=\"c1\"># [arguments-differ]</span>\n        <span class=\"k\">return</span> <span class=\"n\">fluid_one</span> <span class=\"o\">+</span> <span class=\"n\">fluid_two</span> <span class=\"o\">+</span> <span class=\"n\">alcoholic_fluid_one</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Car</span><span class=\"p\">:</span>\n    <span class=\"n\">tank</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">fill_tank</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">gas</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tank</span> <span class=\"o\">+=</span> <span class=\"n\">gas</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Airplane</span><span class=\"p\">(</span><span class=\"n\">Car</span><span class=\"p\">):</span>\n    <span class=\"n\">kerosene_tank</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">fill_tank</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">gas</span><span class=\"p\">,</span> <span class=\"n\">kerosene</span><span class=\"p\">):</span>  <span class=\"c1\"># [arguments-differ]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tank</span> <span class=\"o\">+=</span> <span class=\"n\">gas</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">kerosene_tank</span> <span class=\"o\">+=</span> <span class=\"n\">kerosene</span>\n</pre></div>", "name": "arguments-differ", "id": "W0221", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/arguments-differ.html"}, {"message": "Positional arguments appear to be out of order", "description": "Emitted  when the caller's argument names fully match the parameter names in the function signature but do not have the same order.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">function_3_args</span><span class=\"p\">(</span><span class=\"n\">first_argument</span><span class=\"p\">,</span> <span class=\"n\">second_argument</span><span class=\"p\">,</span> <span class=\"n\">third_argument</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Three arguments function\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">first_argument</span><span class=\"p\">,</span> <span class=\"n\">second_argument</span><span class=\"p\">,</span> <span class=\"n\">third_argument</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">args_out_of_order</span><span class=\"p\">():</span>\n    <span class=\"n\">first_argument</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">second_argument</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"n\">third_argument</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n\n    <span class=\"n\">function_3_args</span><span class=\"p\">(</span><span class=\"n\">first_argument</span><span class=\"p\">,</span> <span class=\"n\">second_argument</span><span class=\"p\">,</span> <span class=\"n\">third_argument</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">function_3_args</span><span class=\"p\">(</span><span class=\"n\">first_argument</span><span class=\"p\">,</span> <span class=\"n\">second_argument</span><span class=\"p\">,</span> <span class=\"n\">third_argument</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Three arguments function\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">first_argument</span><span class=\"p\">,</span> <span class=\"n\">second_argument</span><span class=\"p\">,</span> <span class=\"n\">third_argument</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">args_out_of_order</span><span class=\"p\">():</span>\n    <span class=\"n\">first_argument</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">second_argument</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"n\">third_argument</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n\n    <span class=\"n\">function_3_args</span><span class=\"p\">(</span>  <span class=\"c1\"># [arguments-out-of-order]</span>\n        <span class=\"n\">first_argument</span><span class=\"p\">,</span> <span class=\"n\">third_argument</span><span class=\"p\">,</span> <span class=\"n\">second_argument</span>\n    <span class=\"p\">)</span>\n</pre></div>", "name": "arguments-out-of-order", "id": "W1114", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/arguments-out-of-order.html"}, {"message": "%s %s %r method", "description": "Used when a method parameter has a different name than in the implemented interface or in an overridden method.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Fruit</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">brew</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ingredient_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Brewing a </span><span class=\"si\">{</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\"> with </span><span class=\"si\">{</span><span class=\"n\">ingredient_name</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Apple</span><span class=\"p\">(</span><span class=\"n\">Fruit</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Orange</span><span class=\"p\">(</span><span class=\"n\">Fruit</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">brew</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ingredient_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Brewing an orange with </span><span class=\"si\">{</span><span class=\"n\">ingredient_name</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">fruit</span><span class=\"p\">,</span> <span class=\"n\">ingredient_name</span> <span class=\"ow\">in</span> <span class=\"p\">[[</span><span class=\"n\">Orange</span><span class=\"p\">(),</span> <span class=\"s2\">\"thyme\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">Apple</span><span class=\"p\">(),</span> <span class=\"s2\">\"cinnamon\"</span><span class=\"p\">]]:</span>\n    <span class=\"n\">fruit</span><span class=\"o\">.</span><span class=\"n\">brew</span><span class=\"p\">(</span><span class=\"n\">ingredient_name</span><span class=\"o\">=</span><span class=\"n\">ingredient_name</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Fruit</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">brew</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ingredient_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Brewing a </span><span class=\"si\">{</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\"> with </span><span class=\"si\">{</span><span class=\"n\">ingredient_name</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Apple</span><span class=\"p\">(</span><span class=\"n\">Fruit</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Orange</span><span class=\"p\">(</span><span class=\"n\">Fruit</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">brew</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">flavor</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>  <span class=\"c1\"># [arguments-renamed]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Brewing an orange with </span><span class=\"si\">{</span><span class=\"n\">flavor</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">fruit</span><span class=\"p\">,</span> <span class=\"n\">ingredient_name</span> <span class=\"ow\">in</span> <span class=\"p\">[[</span><span class=\"n\">Orange</span><span class=\"p\">(),</span> <span class=\"s2\">\"thyme\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">Apple</span><span class=\"p\">(),</span> <span class=\"s2\">\"cinnamon\"</span><span class=\"p\">]]:</span>\n    <span class=\"n\">fruit</span><span class=\"o\">.</span><span class=\"n\">brew</span><span class=\"p\">(</span><span class=\"n\">ingredient_name</span><span class=\"o\">=</span><span class=\"n\">ingredient_name</span><span class=\"p\">)</span>\n</pre></div>", "name": "arguments-renamed", "id": "W0237", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/arguments-renamed.html"}, {"message": "Assert statement has a string literal as its first argument. The assert will %s fail.", "description": "Used when an assert statement has a string literal as its first argument, which will cause the assert to always pass.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">test_division</span><span class=\"p\">():</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">9</span> <span class=\"o\">/</span> <span class=\"mi\">3</span>\n    <span class=\"k\">assert</span> <span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">test_division</span><span class=\"p\">():</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">9</span> <span class=\"o\">/</span> <span class=\"mi\">3</span>\n    <span class=\"k\">assert</span> <span class=\"s2\">\"No ZeroDivisionError were raised\"</span>  <span class=\"c1\"># [assert-on-string-literal]</span>\n</pre></div>", "name": "assert-on-string-literal", "id": "W0129", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/assert-on-string-literal.html"}, {"message": "Assert called on a 2-item-tuple. Did you mean 'assert x,y'?", "description": "A call of assert on a tuple will always evaluate to true if the tuple is not empty, and will always evaluate to false if it is.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">x</span>\n<span class=\"k\">assert</span> <span class=\"n\">y</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">assert</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>  <span class=\"c1\"># [assert-on-tuple]</span>\n</pre></div>", "name": "assert-on-tuple", "id": "W0199", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/assert-on-tuple.html"}, {"message": "Attribute %r defined outside __init__", "description": "Used when an instance attribute is defined outside the __init__ method.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Student</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_registered</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">register</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_registered</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Student</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">register</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_registered</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>  <span class=\"c1\"># [attribute-defined-outside-init]</span>\n</pre></div>", "name": "attribute-defined-outside-init", "id": "W0201", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/attribute-defined-outside-init.html"}, {"message": "Used builtin function %s", "description": "Used when a disallowed builtin function is used (see the bad-function option). Usual disallowed functions are the ones like map, or filter , where Python offers now some cleaner alternative like list comprehension.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]))</span>  <span class=\"c1\"># [bad-builtin]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">)</span>\n</pre></div>", "name": "bad-builtin", "id": "W0141", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/bad-builtin.html"}, {"message": "Invalid format string", "description": "Used when a PEP 3101 format string is invalid.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{a[0]}</span><span class=\"s1\"> + </span><span class=\"si\">{a[1]}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'{a[0] + a[1]}'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span> <span class=\"c1\"># [bad-format-string]</span>\n</pre></div>", "name": "bad-format-string", "id": "W1302", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/bad-format-string.html"}, {"message": "Format string dictionary key should be a string, not %s", "description": "Used when a format string that uses named conversion specifiers is used with a dictionary whose keys are not all strings.", "correct_code": null, "problematic_code": null, "name": "bad-format-string-key", "id": "W1300", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/bad-format-string-key.html"}, {"message": "Bad indentation. Found %s %s, expected %s", "description": "Used when an unexpected number of indentation's tabulations or spaces has been found.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">if</span> <span class=\"nb\">input</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'yes'</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">if</span> <span class=\"nb\">input</span><span class=\"p\">():</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'yes'</span><span class=\"p\">)</span>  <span class=\"c1\"># [bad-indentation]</span>\n</pre></div>", "name": "bad-indentation", "id": "W0311", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/bad-indentation.html"}, {"message": "\"%s\" is not a valid mode for open.", "description": "Python supports: r, w, a[, x] modes with b, +, and U (only with r) options. See https://docs.python.org/3/library/functions.html#open", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"s2\">\"r\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n        <span class=\"n\">contents</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"s2\">\"rwx\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>  <span class=\"c1\"># [bad-open-mode]</span>\n        <span class=\"n\">contents</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n</pre></div>", "name": "bad-open-mode", "id": "W1501", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/bad-open-mode.html"}, {"message": "Static method with %r as first argument", "description": "Used when a static method has \"self\" or a value specified in valid-classmethod-first-arg option or valid-metaclass-classmethod-first-arg option as first argument.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Wolf</span><span class=\"p\">:</span>\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">eat</span><span class=\"p\">(</span><span class=\"n\">sheep</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Wolf</span><span class=\"p\">:</span>\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">eat</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># [bad-staticmethod-argument]</span>\n        <span class=\"k\">pass</span>\n</pre></div>", "name": "bad-staticmethod-argument", "id": "W0211", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/bad-staticmethod-argument.html"}, {"message": "threading.Thread needs the target function", "description": "The warning is emitted when a threading.Thread class is instantiated without the target function being passed. By default, the first parameter is the group param, not the target param.", "correct_code": null, "problematic_code": null, "name": "bad-thread-instantiation", "id": "W1506", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/bad-thread-instantiation.html"}, {"message": "No exception type(s) specified", "description": "Used when an except clause doesn't specify exceptions type to catch.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"mi\">0</span>\n<span class=\"k\">except</span> <span class=\"ne\">ZeroDivisionError</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"mi\">0</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>  <span class=\"c1\"># [bare-except]</span>\n    <span class=\"k\">pass</span>\n</pre></div>", "name": "bare-except", "id": "W0702", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/bare-except.html"}, {"message": "Exception to catch is the result of a binary \"%s\" operation", "description": "Used when the exception to catch is of the form \"except A or B:\".  If intending to catch multiple, rewrite as \"except (A, B):\"", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"mi\">0</span>\n<span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">ZeroDivisionError</span><span class=\"p\">,</span> <span class=\"ne\">ValueError</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"mi\">0</span>\n<span class=\"k\">except</span> <span class=\"ne\">ZeroDivisionError</span> <span class=\"ow\">or</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>  <span class=\"c1\"># [binary-op-exception]</span>\n    <span class=\"k\">pass</span>\n</pre></div>", "name": "binary-op-exception", "id": "W0711", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/binary-op-exception.html"}, {"message": "Using datetime.time in a boolean context.", "description": "Using datetime.time in a boolean context can hide subtle bugs when the time they represent matches midnight UTC. This behaviour was fixed in Python 3.5. See https://bugs.python.org/issue13936 for reference.", "correct_code": null, "problematic_code": null, "name": "boolean-datetime", "id": "W1502", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/boolean-datetime.html"}, {"message": "Catching too general exception %s", "description": "Used when an except catches a too general exception, possibly burying unrelated errors.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"mi\">0</span>\n<span class=\"k\">except</span> <span class=\"ne\">ZeroDivisionError</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"mi\">0</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>  <span class=\"c1\"># [broad-except]</span>\n    <span class=\"k\">pass</span>\n</pre></div>", "name": "broad-except", "id": "W0703", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/broad-except.html"}, {"message": "Cell variable %s defined in loop", "description": "A variable used in a closure is defined in a loop. This will result in all closures using the same value for the closed-over variable.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">numbers</span><span class=\"p\">:</span>\n        <span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">numbers</span><span class=\"p\">:</span>\n        <span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">():</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>  <span class=\"c1\"># [cell-var-from-loop]</span>\n        <span class=\"n\">bar</span><span class=\"p\">()</span>\n</pre></div>", "name": "cell-var-from-loop", "id": "W0640", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/cell-var-from-loop.html"}, {"message": "Comparing against a callable, did you omit the parenthesis?", "description": "This message is emitted when pylint detects that a comparison with a callable was made, which might suggest that some parenthesis were omitted, resulting in potential unwanted behaviour.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">function_returning_a_fruit</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"orange\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_an_orange</span><span class=\"p\">(</span><span class=\"n\">fruit</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"apple\"</span><span class=\"p\">):</span>\n    <span class=\"c1\"># apple == orange</span>\n    <span class=\"k\">return</span> <span class=\"n\">fruit</span> <span class=\"o\">==</span> <span class=\"n\">function_returning_a_fruit</span><span class=\"p\">()</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">function_returning_a_fruit</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"orange\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_an_orange</span><span class=\"p\">(</span><span class=\"n\">fruit</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"apple\"</span><span class=\"p\">):</span>\n    <span class=\"c1\"># apple == &lt;function function_returning_a_fruit at 0x7f343ff0a1f0&gt;</span>\n    <span class=\"k\">return</span> <span class=\"n\">fruit</span> <span class=\"o\">==</span> <span class=\"n\">function_returning_a_fruit</span>  <span class=\"c1\"># [comparison-with-callable]</span>\n</pre></div>", "name": "comparison-with-callable", "id": "W0143", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/comparison-with-callable.html"}, {"message": "Following \"as\" with another context manager looks like a tuple.", "description": "Emitted when a `with` statement component returns multiple values and uses name binding with `as` only for a part of those values, as in with ctx() as a, b. This can be misleading, since it's not clear if the context manager returns a tuple or if the node without a name binding is another context manager.", "correct_code": null, "problematic_code": null, "name": "confusing-with-statement", "id": "W0124", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/confusing-with-statement.html"}, {"message": "Consider rewriting as a ternary expression", "description": "Multiple assign statements spread across if/else blocks can be rewritten with a single assignment and ternary expression", "correct_code": null, "problematic_code": null, "name": "consider-ternary-expression", "id": "W0160", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/consider-ternary-expression.html"}, {"message": "Dangerous default value %s as argument", "description": "Used when a mutable value as list or dictionary is detected in a default value for an argument.", "correct_code": null, "problematic_code": null, "name": "dangerous-default-value", "id": "W0102", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/dangerous-default-value.html"}, {"message": "Using deprecated argument %s of method %s()", "description": "The argument is marked as deprecated and will be removed in the future.", "correct_code": null, "problematic_code": null, "name": "deprecated-argument", "id": "W1511", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/deprecated-argument.html"}, {"message": "Using deprecated class %s of module %s", "description": "The class is marked as deprecated and will be removed in the future.", "correct_code": null, "problematic_code": null, "name": "deprecated-class", "id": "W1512", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/deprecated-class.html"}, {"message": "Using deprecated decorator %s()", "description": "The decorator is marked as deprecated and will be removed in the future.", "correct_code": null, "problematic_code": null, "name": "deprecated-decorator", "id": "W1513", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/deprecated-decorator.html"}, {"message": "Using deprecated method %s()", "description": "The method is marked as deprecated and will be removed in a future version of Python. Consider looking for an alternative in the documentation.", "correct_code": null, "problematic_code": null, "name": "deprecated-method", "id": "W1505", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/deprecated-method.html"}, {"message": "Deprecated module %r", "description": "A module marked as deprecated is imported.", "correct_code": null, "problematic_code": null, "name": "deprecated-module", "id": "W0402", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/deprecated-module.html"}, {"message": "'%s' is deprecated, use '%s' instead", "description": "Emitted when a deprecated typing alias is used.", "correct_code": null, "problematic_code": null, "name": "deprecated-typing-alias", "id": "W6001", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/deprecated-typing-alias.html"}, {"message": "\"%s\" differing in parameter documentation", "description": "Please check parameter names in declarations.", "correct_code": null, "problematic_code": null, "name": "differing-param-doc", "id": "W9017", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/differing-param-doc.html"}, {"message": "\"%s\" differing in parameter type documentation", "description": "Please check parameter names in type declarations.", "correct_code": null, "problematic_code": null, "name": "differing-type-doc", "id": "W9018", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/differing-type-doc.html"}, {"message": "Catching previously caught exception type %s", "description": "Used when an except catches a type that was already caught by a previous handler.", "correct_code": null, "problematic_code": null, "name": "duplicate-except", "id": "W0705", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/duplicate-except.html"}, {"message": "Duplicate key %r in dictionary", "description": "Used when a dictionary expression binds the same key multiple times.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">test_score</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"Mathematics\"</span><span class=\"p\">:</span> <span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"s2\">\"Biology\"</span><span class=\"p\">:</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"s2\">\"History\"</span><span class=\"p\">:</span> <span class=\"mi\">75</span><span class=\"p\">}</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">test_score</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"Mathematics\"</span><span class=\"p\">:</span> <span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"s2\">\"Biology\"</span><span class=\"p\">:</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"s2\">\"Mathematics\"</span><span class=\"p\">:</span> <span class=\"mi\">75</span><span class=\"p\">}</span>  <span class=\"c1\"># [duplicate-key]</span>\n</pre></div>", "name": "duplicate-key", "id": "W0109", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/duplicate-key.html"}, {"message": "Duplicate string formatting argument %r, consider passing as named argument", "description": "Used when we detect that a string formatting is repeating an argument instead of using named string arguments", "correct_code": null, "problematic_code": null, "name": "duplicate-string-formatting-argument", "id": "W1308", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/duplicate-string-formatting-argument.html"}, {"message": "Duplicate value %r in set", "description": "This message is emitted when a set contains the same value two or more times.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">correct_set</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'value1'</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">}</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">incorrect_set</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'value1'</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'value1'</span><span class=\"p\">}</span> <span class=\"c1\"># [duplicate-value]</span>\n</pre></div>", "name": "duplicate-value", "id": "W0130", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/duplicate-value.html"}, {"message": "Implementing __eq__ without also implementing __hash__", "description": "Used when a class implements __eq__ but not __hash__. Objects get None as their default __hash__ implementation if they also implement __eq__.", "correct_code": null, "problematic_code": null, "name": "eq-without-hash", "id": "W1641", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/eq-without-hash.html"}, {"message": "Use of eval", "description": "Used when you use the \"eval\" function, to discourage its usage. Consider using `ast.literal_eval` for safely evaluating strings containing Python expressions from untrusted sources.", "correct_code": null, "problematic_code": null, "name": "eval-used", "id": "W0123", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/eval-used.html"}, {"message": "Use of exec", "description": "Used when you use the \"exec\" statement (function for Python 3), to discourage its usage. That doesn't mean you cannot use it !", "correct_code": null, "problematic_code": null, "name": "exec-used", "id": "W0122", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/exec-used.html"}, {"message": "Expression \"%s\" is assigned to nothing", "description": "Used when an expression that is not a function call is assigned to nothing. Probably something else was intended.", "correct_code": null, "problematic_code": null, "name": "expression-not-assigned", "id": "W0106", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/expression-not-assigned.html"}, {"message": "Using an f-string that does not have any interpolated variables", "description": "Used when we detect an f-string that does not use any interpolation variables, in which case it can be either a normal string or a bug in the code.", "correct_code": null, "problematic_code": null, "name": "f-string-without-interpolation", "id": "W1309", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/f-string-without-interpolation.html"}, {"message": "%s", "description": "Used when a warning note as FIXME or XXX is detected.", "correct_code": null, "problematic_code": null, "name": "fixme", "id": "W0511", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/fixme.html"}, {"message": "Leaving functions creating breakpoints in production code is not recommended", "description": "Calls to breakpoint(), sys.breakpointhook() and pdb.set_trace() should be removed from code that is not actively being debugged.", "correct_code": null, "problematic_code": null, "name": "forgotten-debug-statement", "id": "W1515", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/forgotten-debug-statement.html"}, {"message": "Format string contains both automatic field numbering and manual field specification", "description": "Used when a PEP 3101 format string contains both automatic field numbering (e.g. '{}') and manual field specification (e.g. '{0}').", "correct_code": null, "problematic_code": null, "name": "format-combined-specification", "id": "W1305", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/format-combined-specification.html"}, {"message": "Using formatting for a string that does not have any interpolated variables", "description": "Used when we detect a string that does not have any interpolation variables, in which case it can be either a normal string without formatting or a bug in the code.", "correct_code": null, "problematic_code": null, "name": "format-string-without-interpolation", "id": "W1310", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/format-string-without-interpolation.html"}, {"message": "Using the global statement at the module level", "description": "Used when you use the \"global\" statement at the module level since it has no effect", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"mi\">25</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"mi\">25</span>\n<span class=\"k\">global</span> <span class=\"n\">price</span>  <span class=\"c1\"># [global-at-module-level]</span>\n</pre></div>", "name": "global-at-module-level", "id": "W0604", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/global-at-module-level.html"}, {"message": "Using the global statement", "description": "Used when you use the \"global\" statement to update a global variable. Pylint just try to discourage this usage. That doesn't mean you cannot use it !", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"mi\">10</span>\n\n\n<span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"n\">foo</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"k\">global</span> <span class=\"n\">var</span>  <span class=\"c1\"># [global-statement]</span>\n    <span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">foo</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">)</span>\n</pre></div>", "name": "global-statement", "id": "W0603", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/global-statement.html"}, {"message": "Using global for %r but no assignment is done", "description": "Used when a variable is defined through the \"global\" statement but no assignment to this variable is done.", "correct_code": null, "problematic_code": null, "name": "global-variable-not-assigned", "id": "W0602", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/global-variable-not-assigned.html"}, {"message": "Global variable %r undefined at the module level", "description": "Used when a variable is defined through the \"global\" statement but the variable is not defined in the module scope.", "correct_code": null, "problematic_code": null, "name": "global-variable-undefined", "id": "W0601", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/global-variable-undefined.html"}, {"message": "Implicit string concatenation found in %s", "description": "String literals are implicitly concatenated in a literal iterable definition : maybe a comma is missing ?", "correct_code": null, "problematic_code": null, "name": "implicit-str-concat", "id": "W1404", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/implicit-str-concat.html"}, {"message": "Module import itself", "description": "Used when a module is importing itself.", "correct_code": null, "problematic_code": null, "name": "import-self", "id": "W0406", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/import-self.html"}, {"message": "Quote delimiter %s is inconsistent with the rest of the file", "description": "Quote delimiters are not used consistently throughout a module (with allowances made for avoiding unnecessary escaping).", "correct_code": null, "problematic_code": null, "name": "inconsistent-quotes", "id": "W1405", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/inconsistent-quotes.html"}, {"message": "%s default type is %s. Expected str or None.", "description": "Env manipulation functions return None or str values. Supplying anything different as a default may cause bugs. See https://docs.python.org/3/library/os.html#os.getenv.", "correct_code": null, "problematic_code": null, "name": "invalid-envvar-default", "id": "W1508", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/invalid-envvar-default.html"}, {"message": "Using invalid lookup key %r in format specifier %r", "description": "Used when a PEP 3101 format string uses a lookup specifier ({a[1]}), but the argument passed for formatting doesn't contain or doesn't have that key as an attribute.", "correct_code": null, "problematic_code": null, "name": "invalid-format-index", "id": "W1307", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/invalid-format-index.html"}, {"message": "Method %r was expected to be %r, found it instead as %r", "description": "Used when we detect that a method was overridden in a way that does not match its base class which could result in potential bugs at runtime.", "correct_code": null, "problematic_code": null, "name": "invalid-overridden-method", "id": "W0236", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/invalid-overridden-method.html"}, {"message": "Second argument of isinstance is not a type", "description": "Emitted when the second argument of an isinstance call is not a type.", "correct_code": null, "problematic_code": null, "name": "isinstance-second-argument-not-valid-type", "id": "W1116", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/isinstance-second-argument-not-valid-type.html"}, {"message": "Keyword argument before variable positional arguments list in the definition of %s function", "description": "When defining a keyword argument before variable positional arguments, one can end up in having multiple values passed for the aforementioned parameter in case the method is called with keyword arguments.", "correct_code": null, "problematic_code": null, "name": "keyword-arg-before-vararg", "id": "W1113", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/keyword-arg-before-vararg.html"}, {"message": "Use %s formatting in logging functions", "description": "Used when a logging statement has a call form of \"logging.<logging method>(format_string.format(format_args...))\". Use another type of string formatting instead. You can use % formatting but leave interpolation to the logging function by passing the parameters as arguments. If logging-fstring-interpolation is disabled then you can use fstring formatting. If logging-not-lazy is disabled then you can use % formatting as normal.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">'Python version: </span><span class=\"si\">%s</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">version</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">'Python version: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">version</span><span class=\"p\">))</span>  <span class=\"c1\"># [logging-format-interpolation]</span>\n</pre></div>", "name": "logging-format-interpolation", "id": "W1202", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/logging-format-interpolation.html"}, {"message": "Use %s formatting in logging functions", "description": "Used when a logging statement has a call form of \"logging.<logging method>(f\"...\")\".Use another type of string formatting instead. You can use % formatting but leave interpolation to the logging function by passing the parameters as arguments. If logging-format-interpolation is disabled then you can use str.format. If logging-not-lazy is disabled then you can use % formatting as normal.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">'Python version: </span><span class=\"si\">%s</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">version</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Python version: </span><span class=\"si\">{</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">version</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>  <span class=\"c1\"># [logging-fstring-interpolation]</span>\n</pre></div>", "name": "logging-fstring-interpolation", "id": "W1203", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/logging-fstring-interpolation.html"}, {"message": "Use %s formatting in logging functions", "description": "Used when a logging statement has a call form of \"logging.<logging method>(format_string % (format_args...))\". Use another type of string formatting instead. You can use % formatting but leave interpolation to the logging function by passing the parameters as arguments. If logging-fstring-interpolation is disabled then you can use fstring formatting. If logging-format-interpolation is disabled then you can use str.format.", "correct_code": null, "problematic_code": null, "name": "logging-not-lazy", "id": "W1201", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/logging-not-lazy.html"}, {"message": "%s statement in finally block may swallow exception", "description": "Used when a break or a return statement is found inside the finally clause of a try...finally block: the exceptions raised in the try clause will be silently swallowed instead of being re-raised.", "correct_code": null, "problematic_code": null, "name": "lost-exception", "id": "W0150", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/lost-exception.html"}, {"message": "'lru_cache(maxsize=None)' or 'cache' will keep all method args alive indefinitely, including 'self'", "description": "By decorating a method with lru_cache or cache the 'self' argument will be linked to the function and therefore never garbage collected. Unless your instance will never need to be garbage collected (singleton) it is recommended to refactor code to avoid this pattern or add a maxsize to the cache.The default value for maxsize is 128.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">functools</span>\n\n\n<span class=\"nd\">@functools</span><span class=\"o\">.</span><span class=\"n\">cache</span>\n<span class=\"k\">def</span> <span class=\"nf\">cached_fibonacci</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">}:</span>\n        <span class=\"k\">return</span> <span class=\"n\">n</span>\n    <span class=\"k\">return</span> <span class=\"n\">cached_fibonacci</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">cached_fibonacci</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Fibonnaci</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">fibonacci</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">cached_fibonacci</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">functools</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Fibonnaci</span><span class=\"p\">:</span>\n    <span class=\"nd\">@functools</span><span class=\"o\">.</span><span class=\"n\">lru_cache</span><span class=\"p\">(</span><span class=\"n\">maxsize</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>  <span class=\"c1\"># [method-cache-max-size-none]</span>\n    <span class=\"k\">def</span> <span class=\"nf\">fibonacci</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">}:</span>\n            <span class=\"k\">return</span> <span class=\"n\">n</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre></div>", "name": "method-cache-max-size-none", "id": "W1518", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/method-cache-max-size-none.html"}, {"message": "__future__ import is not the first non docstring statement", "description": "Python 2.5 and greater require __future__ import to be the first non docstring statement in the module.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>  <span class=\"c1\"># [misplaced-future]</span>\n</pre></div>", "name": "misplaced-future", "id": "W0410", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/misplaced-future.html"}, {"message": "Missing any documentation in \"%s\"", "description": "Please add parameter and/or type documentation.", "correct_code": null, "problematic_code": null, "name": "missing-any-param-doc", "id": "W9021", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/missing-any-param-doc.html"}, {"message": "Missing keyword argument %r for format string", "description": "Used when a PEP 3101 format string that uses named fields doesn't receive one or more required keywords.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"My name is </span><span class=\"si\">{first}</span><span class=\"s2\"> </span><span class=\"si\">{last}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"o\">=</span><span class=\"s2\">\"John\"</span><span class=\"p\">,</span> <span class=\"n\">last</span><span class=\"o\">=</span><span class=\"s2\">\"Wick\"</span><span class=\"p\">))</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"My name is </span><span class=\"si\">{first}</span><span class=\"s2\"> </span><span class=\"si\">{last}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"o\">=</span><span class=\"s2\">\"John\"</span><span class=\"p\">))</span>  <span class=\"c1\"># [missing-format-argument-key]</span>\n</pre></div>", "name": "missing-format-argument-key", "id": "W1303", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/missing-format-argument-key.html"}, {"message": "Missing format attribute %r in format specifier %r", "description": "Used when a PEP 3101 format string uses an attribute specifier ({0.length}), but the argument passed for formatting doesn't have that attribute.", "correct_code": null, "problematic_code": null, "name": "missing-format-attribute", "id": "W1306", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/missing-format-attribute.html"}, {"message": "\"%s\" missing in parameter documentation", "description": "Please add parameter declarations for all parameters.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">integer_sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Returns sum of two integers</span>\n<span class=\"sd\">    :param a: first integer</span>\n<span class=\"sd\">    :param b: second integer</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">integer_sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>  <span class=\"c1\"># [missing-param-doc]</span>\n    <span class=\"sd\">\"\"\"Returns sum of two integers</span>\n<span class=\"sd\">    :param a: first integer</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</pre></div>", "name": "missing-param-doc", "id": "W9015", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/missing-param-doc.html"}, {"message": "Using a conditional statement with potentially wrong function or method call due to missing parentheses", "description": "Emitted when a conditional statement (If or ternary if) seems to wrongly call a function due to missing parentheses", "correct_code": null, "problematic_code": null, "name": "missing-parentheses-for-call-in-test", "id": "W0126", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/missing-parentheses-for-call-in-test.html"}, {"message": "\"%s\" not documented as being raised", "description": "Please document exceptions for all raised exception types.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">integer_sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Returns sum of two integers</span>\n<span class=\"sd\">    :param a: first integer</span>\n<span class=\"sd\">    :param b: second integer</span>\n<span class=\"sd\">    :raises ValueError: One of the parameters is not an integer.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">'Function supports only integer parameters.'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">integer_sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>  <span class=\"c1\"># [missing-raises-doc]</span>\n    <span class=\"sd\">\"\"\"Returns sum of two integers</span>\n<span class=\"sd\">    :param a: first integer</span>\n<span class=\"sd\">    :param b: second integer</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">'Function supports only integer parameters.'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</pre></div>", "name": "missing-raises-doc", "id": "W9006", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/missing-raises-doc.html"}, {"message": "Missing return documentation", "description": "Please add documentation about what this method returns.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">integer_sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Returns sum of two integers</span>\n<span class=\"sd\">    :param a: first integer</span>\n<span class=\"sd\">    :param b: second integer</span>\n<span class=\"sd\">    :return: sum of parameters a and b</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">integer_sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>  <span class=\"c1\"># [missing-return-doc]</span>\n    <span class=\"sd\">\"\"\"Returns sum of two integers</span>\n<span class=\"sd\">    :param a: first integer</span>\n<span class=\"sd\">    :param b: second integer</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</pre></div>", "name": "missing-return-doc", "id": "W9011", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/missing-return-doc.html"}, {"message": "Missing return type documentation", "description": "Please document the type returned by this method.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">integer_sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Returns sum of two integers</span>\n<span class=\"sd\">    :param a: first integer</span>\n<span class=\"sd\">    :param b: second integer</span>\n<span class=\"sd\">    :return: sum of parameters a and b</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">integer_sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>  <span class=\"c1\"># [missing-return-type-doc]</span>\n    <span class=\"sd\">\"\"\"Returns sum of two integers</span>\n<span class=\"sd\">    :param a: first integer</span>\n<span class=\"sd\">    :param b: second integer</span>\n<span class=\"sd\">    :return: sum of parameters a and b</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</pre></div>", "name": "missing-return-type-doc", "id": "W9012", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/missing-return-type-doc.html"}, {"message": "\"%s\" missing in parameter type documentation", "description": "Please add parameter type declarations for all parameters.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">integer_sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Returns sum of two integers</span>\n<span class=\"sd\">    :param a: first integer</span>\n<span class=\"sd\">    :param b: second integer</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">integer_sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>  <span class=\"c1\"># [missing-type-doc]</span>\n    <span class=\"sd\">\"\"\"Returns sum of two integers</span>\n<span class=\"sd\">    :param a: first integer</span>\n<span class=\"sd\">    :param b: second integer</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</pre></div>", "name": "missing-type-doc", "id": "W9016", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/missing-type-doc.html"}, {"message": "Missing yield documentation", "description": "Please add documentation about what this generator yields.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Iterator</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">even_number_under</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]:</span>\n    <span class=\"sd\">\"\"\"Prints even numbers smaller than n.</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        n: Upper limit of even numbers.</span>\n\n<span class=\"sd\">    Yields:</span>\n<span class=\"sd\">        even numbers</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n        <span class=\"k\">yield</span> <span class=\"n\">i</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">even_number_under</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>  <span class=\"c1\"># [missing-yield-doc]</span>\n    <span class=\"sd\">\"\"\"Prints even numbers smaller than n.</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        n: Upper limit of even numbers.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n        <span class=\"k\">yield</span> <span class=\"n\">i</span>\n</pre></div>", "name": "missing-yield-doc", "id": "W9013", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/missing-yield-doc.html"}, {"message": "Missing yield type documentation", "description": "Please document the type yielded by this method.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Iterator</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">even_number_under</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]:</span>\n    <span class=\"sd\">\"\"\"Prints even numbers smaller than n.</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        n: Upper limit of even numbers.</span>\n\n<span class=\"sd\">    Yields:</span>\n<span class=\"sd\">        even numbers</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n        <span class=\"k\">yield</span> <span class=\"n\">i</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">even_number_under</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>  <span class=\"c1\"># [missing-yield-type-doc]</span>\n    <span class=\"sd\">\"\"\"Prints even numbers smaller than n.</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        n: Upper limit of even numbers.</span>\n\n<span class=\"sd\">    Yields:</span>\n<span class=\"sd\">        even numbers</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n        <span class=\"k\">yield</span> <span class=\"n\">i</span>\n</pre></div>", "name": "missing-yield-type-doc", "id": "W9014", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/missing-yield-type-doc.html"}, {"message": "Iterated list '%s' is being modified inside for loop body, consider iterating through a copy of it instead.", "description": "Emitted when items are added or removed to a list being iterated through. Doing so can result in unexpected behaviour, that is why it is preferred to use a copy of the list.", "correct_code": null, "problematic_code": null, "name": "modified-iterating-list", "id": "W4701", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/modified-iterating-list.html"}, {"message": "\"%s\" has constructor parameters documented in class and __init__", "description": "Please remove parameter declarations in the class or constructor.", "correct_code": null, "problematic_code": null, "name": "multiple-constructor-doc", "id": "W9005", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/multiple-constructor-doc.html"}, {"message": "Comparison %s should be %s", "description": "Used when an expression is compared to NaNvalues like numpy.NaN and float('nan')", "correct_code": null, "problematic_code": null, "name": "nan-comparison", "id": "W0177", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/nan-comparison.html"}, {"message": "%s name \"%s\" contains a non-ASCII character. PEP 3131 only allows non-ascii identifiers, not file names.", "description": "Some editors don't support non-ASCII file names properly. Even though Python supports UTF-8 files since Python 3.5 this isn't recommended for interoperability. Further reading:\n- https://peps.python.org/pep-0489/#export-hook-name\n- https://peps.python.org/pep-0672/#confusing-features\n- https://bugs.python.org/issue20485", "correct_code": null, "problematic_code": null, "name": "non-ascii-file-name", "id": "W2402", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/non-ascii-file-name.html"}, {"message": "__init__ method from a non direct base class %r is called", "description": "Used when an __init__ method is called on a class which is not in the direct ancestors for the analysed class.", "correct_code": null, "problematic_code": null, "name": "non-parent-init-called", "id": "W0233", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/non-parent-init-called.html"}, {"message": "Non-string value assigned to __name__", "description": "Emitted when a non-string value is assigned to __name__", "correct_code": null, "problematic_code": null, "name": "non-str-assignment-to-dunder-name", "id": "W1115", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/non-str-assignment-to-dunder-name.html"}, {"message": "Overlapping exceptions (%s)", "description": "Used when exceptions in handler overlap or are identical", "correct_code": null, "problematic_code": null, "name": "overlapping-except", "id": "W0714", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/overlapping-except.html"}, {"message": "Method %r overrides a method decorated with typing.final which is defined in class %r", "description": "Used when a method decorated with typing.final has been overridden.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">final</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Animal</span><span class=\"p\">:</span>\n    <span class=\"nd\">@final</span>\n    <span class=\"k\">def</span> <span class=\"nf\">can_breathe</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">(</span><span class=\"n\">Animal</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">can_purr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">final</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Animal</span><span class=\"p\">:</span>\n    <span class=\"nd\">@final</span>\n    <span class=\"k\">def</span> <span class=\"nf\">can_breathe</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">(</span><span class=\"n\">Animal</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">can_breathe</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># [overridden-final-method]</span>\n        <span class=\"k\">pass</span>\n</pre></div>", "name": "overridden-final-method", "id": "W0239", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/overridden-final-method.html"}, {"message": "Statement seems to have no effect", "description": "Used when a statement doesn't have (or at least seems to) any effect.", "correct_code": null, "problematic_code": null, "name": "pointless-statement", "id": "W0104", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/pointless-statement.html"}, {"message": "String statement has no effect", "description": "Used when a string is used as a statement (which of course has no effect). This is a particular case of W0104 with its own message so you can easily disable it if you're using those strings as documentation, instead of comments.", "correct_code": null, "problematic_code": null, "name": "pointless-string-statement", "id": "W0105", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/pointless-string-statement.html"}, {"message": "Possibly unused variable %r", "description": "Used when a variable is defined but might not be used. The possibility comes from the fact that locals() might be used, which could consume or not the said variable", "correct_code": null, "problematic_code": null, "name": "possibly-unused-variable", "id": "W0641", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/possibly-unused-variable.html"}, {"message": "Prefer importing %r instead of %r", "description": "Used when a module imported has a preferred replacement module.", "correct_code": null, "problematic_code": null, "name": "preferred-module", "id": "W0407", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/preferred-module.html"}, {"message": "Access to a protected member %s of a client class", "description": "Used when a protected member (i.e. class member with a name beginning with an underscore) is access outside the class or a descendant of the class where it's defined.", "correct_code": null, "problematic_code": null, "name": "protected-access", "id": "W0212", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/protected-access.html"}, {"message": "Consider explicitly re-raising using the 'from' keyword", "description": "Python 3's exception chaining means it shows the traceback of the current exception, but also the original exception. Not using `raise from` makes the traceback inaccurate, because the message implies there is a bug in the exception-handling code itself, which is a separate situation than wrapping an exception.", "correct_code": null, "problematic_code": null, "name": "raise-missing-from", "id": "W0707", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/raise-missing-from.html"}, {"message": "Exception arguments suggest string formatting might be intended", "description": "Used when passing multiple arguments to an exception constructor, the first of them a string literal containing what appears to be placeholders intended for formatting", "correct_code": null, "problematic_code": null, "name": "raising-format-tuple", "id": "W0715", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/raising-format-tuple.html"}, {"message": "Redeclared variable %r in assignment", "description": "Emitted when we detect that a variable was redeclared in the same assignment.", "correct_code": null, "problematic_code": null, "name": "redeclared-assigned-name", "id": "W0128", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/redeclared-assigned-name.html"}, {"message": "Redefining built-in %r", "description": "Used when a variable or function override a built-in.", "correct_code": null, "problematic_code": null, "name": "redefined-builtin", "id": "W0622", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/redefined-builtin.html"}, {"message": "Redefining %r from loop (line %s)", "description": "Used when a loop variable is overwritten in the loop body.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">names</span><span class=\"p\">:</span>\n    <span class=\"n\">lowercased_name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">names</span><span class=\"p\">:</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>  <span class=\"c1\"># [redefined-loop-name]</span>\n</pre></div>", "name": "redefined-loop-name", "id": "W2901", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/redefined-loop-name.html"}, {"message": "Redefining name %r from outer scope (line %s)", "description": "Used when a variable's name hides a name defined in an outer scope or except handler.", "correct_code": null, "problematic_code": null, "name": "redefined-outer-name", "id": "W0621", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/redefined-outer-name.html"}, {"message": "Redefined slots %r in subclass", "description": "Used when a slot is re-defined in a subclass.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Base</span><span class=\"p\">:</span>\n    <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Subclass</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">\"d\"</span><span class=\"p\">,)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Base</span><span class=\"p\">:</span>\n    <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Subclass</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"d\"</span><span class=\"p\">)</span>  <span class=\"c1\"># [redefined-slots-in-subclass]</span>\n</pre></div>", "name": "redefined-slots-in-subclass", "id": "W0244", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/redefined-slots-in-subclass.html"}, {"message": "Redundant returns documentation", "description": "Please remove the return/rtype documentation from this method.", "correct_code": null, "problematic_code": null, "name": "redundant-returns-doc", "id": "W9008", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/redundant-returns-doc.html"}, {"message": "The u prefix for strings is no longer necessary in Python >=3.0", "description": "Used when we detect a string with a u prefix. These prefixes were necessary in Python 2 to indicate a string was Unicode, but since Python 3.0 strings are Unicode by default.", "correct_code": null, "problematic_code": null, "name": "redundant-u-string-prefix", "id": "W1406", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/redundant-u-string-prefix.html"}, {"message": "Redundant use of %s with constant value %r", "description": "The first argument of assertTrue and assertFalse is a condition. If a constant is passed as parameter, that condition will be always true. In this case a warning should be emitted.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">unittest</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DummyTestCase</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_dummy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">actual</span> <span class=\"o\">=</span> <span class=\"s2\">\"test_result\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">actual</span><span class=\"p\">,</span> <span class=\"s2\">\"expected\"</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">unittest</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DummyTestCase</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_dummy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"s2\">\"foo\"</span><span class=\"p\">)</span>  <span class=\"c1\"># [redundant-unittest-assert]</span>\n</pre></div>", "name": "redundant-unittest-assert", "id": "W1503", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/redundant-unittest-assert.html"}, {"message": "Redundant yields documentation", "description": "Please remove the yields documentation from this method.", "correct_code": null, "problematic_code": null, "name": "redundant-yields-doc", "id": "W9010", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/redundant-yields-doc.html"}, {"message": "Reimport %r (imported line %s)", "description": "Used when a module is reimported multiple times.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>  <span class=\"c1\"># [reimported]</span>\n</pre></div>", "name": "reimported", "id": "W0404", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/reimported.html"}, {"message": "Assigning the same variable %r to itself", "description": "Emitted when we detect that a variable is assigned to itself", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">year</span> <span class=\"o\">=</span> <span class=\"mi\">2000</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">year</span> <span class=\"o\">=</span> <span class=\"mi\">2000</span>\n<span class=\"n\">year</span> <span class=\"o\">=</span> <span class=\"n\">year</span>  <span class=\"c1\"># [self-assigning-variable]</span>\n</pre></div>", "name": "self-assigning-variable", "id": "W0127", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/self-assigning-variable.html"}, {"message": "Invalid assignment to %s in method", "description": "Invalid assignment to self or cls in instance or class method respectively.", "correct_code": null, "problematic_code": null, "name": "self-cls-assignment", "id": "W0642", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/self-cls-assignment.html"}, {"message": "Using copy.copy(os.environ). Use os.environ.copy() instead.", "description": "os.environ is not a dict object but proxy object, so shallow copy has still effects on original object. See https://bugs.python.org/issue15373 for reference.", "correct_code": null, "problematic_code": null, "name": "shallow-copy-environ", "id": "W1507", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/shallow-copy-environ.html"}, {"message": "Signature differs from %s %r method", "description": "Used when a method signature is different than in the implemented interface or in an overridden method.", "correct_code": null, "problematic_code": null, "name": "signature-differs", "id": "W0222", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/signature-differs.html"}, {"message": "Class %r is a subclass of a class decorated with typing.final: %r", "description": "Used when a class decorated with typing.final has been subclassed.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">final</span>\n\n\n<span class=\"nd\">@final</span>\n<span class=\"k\">class</span> <span class=\"nc\">PlatypusData</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"General Platypus data.\"\"\"</span>\n\n    <span class=\"n\">average_length</span> <span class=\"o\">=</span> <span class=\"mi\">46</span>\n    <span class=\"n\">average_body_temperature</span> <span class=\"o\">=</span> <span class=\"mi\">32</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">print_average_length_platypus</span><span class=\"p\">():</span>\n    <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"The average length of a platypus is: </span><span class=\"si\">{</span><span class=\"n\">PlatypusData</span><span class=\"o\">.</span><span class=\"n\">average_length</span><span class=\"si\">}</span><span class=\"s2\">cm\"</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">final</span>\n\n\n<span class=\"nd\">@final</span>\n<span class=\"k\">class</span> <span class=\"nc\">PlatypusData</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"General Platypus data.\"\"\"</span>\n\n    <span class=\"n\">average_length</span> <span class=\"o\">=</span> <span class=\"mi\">46</span>\n    <span class=\"n\">average_body_temperature</span> <span class=\"o\">=</span> <span class=\"mi\">32</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">FluorescentPlaytipus</span><span class=\"p\">(</span><span class=\"n\">PlatypusData</span><span class=\"p\">):</span>  <span class=\"c1\"># [subclassed-final-class]</span>\n    <span class=\"sd\">\"\"\"Playtipus with fluorescent fur.\"\"\"</span>\n</pre></div>", "name": "subclassed-final-class", "id": "W0240", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/subclassed-final-class.html"}, {"message": "Using preexec_fn keyword which may be unsafe in the presence of threads", "description": "The preexec_fn parameter is not safe to use in the presence of threads in your application. The child process could deadlock before exec is called. If you must use it, keep it trivial! Minimize the number of libraries you call into.https://docs.python.org/3/library/subprocess.html#popen-constructor", "correct_code": null, "problematic_code": null, "name": "subprocess-popen-preexec-fn", "id": "W1509", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/subprocess-popen-preexec-fn.html"}, {"message": "Using subprocess.run without explicitly set check is not recommended.", "description": "The check parameter should always be used with explicitly set `check` keyword to make clear what the error-handling behavior is.https://docs.python.org/3/library/subprocess.html#subprocess.run", "correct_code": null, "problematic_code": null, "name": "subprocess-run-check", "id": "W1510", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/subprocess-run-check.html"}, {"message": "__init__ method from base class %r is not called", "description": "Used when an ancestor class method has an __init__ method which is not called by a derived class.", "correct_code": null, "problematic_code": null, "name": "super-init-not-called", "id": "W0231", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/super-init-not-called.html"}, {"message": "Super call without brackets", "description": "Used when a call to super does not have brackets and thus is not an actual call and does not work as expected.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Soup</span><span class=\"p\">:</span>\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">temp</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Soup is hot!\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TomatoSoup</span><span class=\"p\">(</span><span class=\"n\">Soup</span><span class=\"p\">):</span>\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">temp</span><span class=\"p\">():</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">temp</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"But tomato soup is even hotter!\"</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Soup</span><span class=\"p\">:</span>\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">temp</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Soup is hot!\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TomatoSoup</span><span class=\"p\">(</span><span class=\"n\">Soup</span><span class=\"p\">):</span>\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">temp</span><span class=\"p\">():</span>\n        <span class=\"nb\">super</span><span class=\"o\">.</span><span class=\"n\">temp</span><span class=\"p\">()</span>  <span class=\"c1\"># [super-without-brackets]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"But tomato soup is even hotter!\"</span><span class=\"p\">)</span>\n</pre></div>", "name": "super-without-brackets", "id": "W0245", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/super-without-brackets.html"}, {"message": "%s", "description": "Try clause contains too many statements.", "correct_code": null, "problematic_code": null, "name": "too-many-try-statements", "id": "W0717", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/too-many-try-statements.html"}, {"message": "The except handler raises immediately", "description": "Used when an except handler uses raise as its first or only operator. This is useless because it raises back the exception immediately. Remove the raise operator or the entire try-except-raise block!", "correct_code": null, "problematic_code": null, "name": "try-except-raise", "id": "W0706", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/try-except-raise.html"}, {"message": "Possible unbalanced tuple unpacking with sequence%s: left side has %d label(s), right side has %d value(s)", "description": "Used when there is an unbalanced tuple unpacking in assignment", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">fruits</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">\"orange\"</span><span class=\"p\">,</span> <span class=\"s2\">\"apple\"</span><span class=\"p\">,</span> <span class=\"s2\">\"strawberry\"</span><span class=\"p\">,</span> <span class=\"s2\">\"peer\"</span><span class=\"p\">)</span>\n<span class=\"n\">orange</span><span class=\"p\">,</span> <span class=\"n\">apple</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">remaining_fruits</span> <span class=\"o\">=</span> <span class=\"n\">fruits</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">fruits</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">\"orange\"</span><span class=\"p\">,</span> <span class=\"s2\">\"apple\"</span><span class=\"p\">,</span> <span class=\"s2\">\"strawberry\"</span><span class=\"p\">,</span> <span class=\"s2\">\"peer\"</span><span class=\"p\">)</span>\n<span class=\"n\">orange</span><span class=\"p\">,</span> <span class=\"n\">apple</span><span class=\"p\">,</span> <span class=\"n\">strawberry</span> <span class=\"o\">=</span> <span class=\"n\">fruits</span>  <span class=\"c1\"># [unbalanced-tuple-unpacking]</span>\n</pre></div>", "name": "unbalanced-tuple-unpacking", "id": "W0632", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/unbalanced-tuple-unpacking.html"}, {"message": "Using possibly undefined loop variable %r", "description": "Used when a loop variable (i.e. defined by a for loop or a list comprehension or a generator expression) is used outside the loop.", "correct_code": null, "problematic_code": null, "name": "undefined-loop-variable", "id": "W0631", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/undefined-loop-variable.html"}, {"message": "Unnecessary ellipsis constant", "description": "Used when the ellipsis constant is encountered and can be avoided. A line of code consisting of an ellipsis is unnecessary if there is a docstring on the preceding line or if there is a statement in the same scope.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">my_function</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"My docstring\"\"\"</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">my_function</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"My docstring\"\"\"</span>\n    <span class=\"o\">...</span>  <span class=\"c1\"># [unnecessary-ellipsis]</span>\n</pre></div>", "name": "unnecessary-ellipsis", "id": "W2301", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/unnecessary-ellipsis.html"}, {"message": "Lambda may not be necessary", "description": "Used when the body of a lambda expression is a function call on the same argument list as the lambda itself; such lambda expressions are in all but a few cases replaceable with the function being called in the body of the lambda.", "correct_code": null, "problematic_code": null, "name": "unnecessary-lambda", "id": "W0108", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/unnecessary-lambda.html"}, {"message": "Unnecessary pass statement", "description": "Used when a \"pass\" statement that can be avoided is encountered.", "correct_code": null, "problematic_code": null, "name": "unnecessary-pass", "id": "W0107", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/unnecessary-pass.html"}, {"message": "Unnecessary semicolon", "description": "Used when a statement is ended by a semi-colon (\";\"), which isn't necessary (that's python, not C ;).", "correct_code": null, "problematic_code": null, "name": "unnecessary-semicolon", "id": "W0301", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/unnecessary-semicolon.html"}, {"message": "Unreachable code", "description": "Used when there is some code behind a \"return\" or \"raise\" statement, which will never be accessed.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">say_hello</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Hello World!, Inside function.\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">say_hello</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Hello World!, Outside function.\"</span><span class=\"p\">)</span>  <span class=\"c1\"># [unreachable]</span>\n</pre></div>", "name": "unreachable", "id": "W0101", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/unreachable.html"}, {"message": "Using open without explicitly specifying an encoding", "description": "It is better to specify an encoding when opening documents. Using the system default implicitly can create problems on other operating systems. See https://peps.python.org/pep-0597/", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">\"utf-8\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n        <span class=\"n\">contents</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>  <span class=\"c1\"># [unspecified-encoding]</span>\n        <span class=\"n\">contents</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n</pre></div>", "name": "unspecified-encoding", "id": "W1514", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/unspecified-encoding.html"}, {"message": "Unused argument %r", "description": "Used when a function or method argument is not used.", "correct_code": null, "problematic_code": null, "name": "unused-argument", "id": "W0613", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/unused-argument.html"}, {"message": "Unused format argument %r", "description": "Used when a PEP 3101 format string that uses named fields is used with an argument that is not required by the format string.", "correct_code": null, "problematic_code": null, "name": "unused-format-string-argument", "id": "W1304", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/unused-format-string-argument.html"}, {"message": "Unused key %r in format string dictionary", "description": "Used when a format string that uses named conversion specifiers is used with a dictionary that contains keys not required by the format string.", "correct_code": null, "problematic_code": null, "name": "unused-format-string-key", "id": "W1301", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/unused-format-string-key.html"}, {"message": "Unused %s", "description": "Used when an imported module or variable is not used.", "correct_code": null, "problematic_code": null, "name": "unused-import", "id": "W0611", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/unused-import.html"}, {"message": "Unused private member %s.%s", "description": "Emitted when a private member of a class is defined but not used.", "correct_code": null, "problematic_code": null, "name": "unused-private-member", "id": "W0238", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/unused-private-member.html"}, {"message": "Unused variable %r", "description": "Used when a variable is defined but not used.", "correct_code": null, "problematic_code": null, "name": "unused-variable", "id": "W0612", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/unused-variable.html"}, {"message": "Unused import(s) %s from wildcard import of %s", "description": "Used when an imported module or variable is not used from a `'from X import *'` style import.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">abc</span> <span class=\"kn\">import</span> <span class=\"n\">ABC</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Animal</span><span class=\"p\">(</span><span class=\"n\">ABC</span><span class=\"p\">):</span> <span class=\"o\">...</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">abc</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># [unused-wildcard-import]</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Animal</span><span class=\"p\">(</span><span class=\"n\">ABC</span><span class=\"p\">):</span> <span class=\"o\">...</span>\n</pre></div>", "name": "unused-wildcard-import", "id": "W0614", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/unused-wildcard-import.html"}, {"message": "Else clause on loop without a break statement, remove the else and de-indent all the code inside it", "description": "Loops should only have an else clause if they can exit early with a break statement, otherwise the statements under else should be on the same scope as the loop itself.", "correct_code": null, "problematic_code": null, "name": "useless-else-on-loop", "id": "W0120", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/useless-else-on-loop.html"}, {"message": "\"%s\" useless ignored parameter documentation", "description": "Please remove the ignored parameter documentation.", "correct_code": null, "problematic_code": null, "name": "useless-param-doc", "id": "W9019", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/useless-param-doc.html"}, {"message": "Useless super delegation in method %r", "description": "Used whenever we can detect that an overridden method is useless, relying on super() delegation to do the same thing as another method from the MRO.", "correct_code": null, "problematic_code": null, "name": "useless-super-delegation", "id": "W0235", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/useless-super-delegation.html"}, {"message": "\"%s\" useless ignored parameter type documentation", "description": "Please remove the ignored parameter type documentation.", "correct_code": null, "problematic_code": null, "name": "useless-type-doc", "id": "W9020", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/useless-type-doc.html"}, {"message": "'%s()' directly created in 'with' has no effect", "description": "Used when a new lock instance is created by using with statement which has no effect. Instead, an existing instance should be used to acquire lock.", "correct_code": null, "problematic_code": null, "name": "useless-with-lock", "id": "W2101", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/useless-with-lock.html"}, {"message": "Using a conditional statement with a constant value", "description": "Emitted when a conditional statement (If or ternary if) uses a constant value for its test. This might not be what the user intended to do.", "correct_code": null, "problematic_code": null, "name": "using-constant-test", "id": "W0125", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/using-constant-test.html"}, {"message": "F-strings are not supported by all versions included in the py-version setting", "description": "Used when the py-version set by the user is lower than 3.6 and pylint encounters a f-string.", "correct_code": null, "problematic_code": null, "name": "using-f-string-in-unsupported-version", "id": "W2601", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/using-f-string-in-unsupported-version.html"}, {"message": "typing.final is not supported by all versions included in the py-version setting", "description": "Used when the py-version set by the user is lower than 3.8 and pylint encounters a ``typing.final`` decorator.", "correct_code": null, "problematic_code": null, "name": "using-final-decorator-in-unsupported-version", "id": "W2602", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/using-final-decorator-in-unsupported-version.html"}, {"message": "Used while loop", "description": "Unbounded `while` loops can often be rewritten as bounded `for` loops.", "correct_code": null, "problematic_code": null, "name": "while-used", "id": "W0149", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/while-used.html"}, {"message": "Wildcard import %s", "description": "Used when `from module import *` is detected.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"c1\"># Either import module or</span>\n<span class=\"c1\"># only import required objects from module.</span>\n<span class=\"kn\">import</span> <span class=\"nn\">abc</span>\n<span class=\"kn\">from</span> <span class=\"nn\">abc</span> <span class=\"kn\">import</span> <span class=\"n\">ABC</span><span class=\"p\">,</span> <span class=\"n\">abstractmethod</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">abc</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># [wildcard-import]</span>\n</pre></div>", "name": "wildcard-import", "id": "W0401", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/wildcard-import.html"}, {"message": "Invalid exception operation. %s", "description": "Used when an operation is done against an exception, but the operation is not valid for the exception in question. Usually emitted when having binary operations between exceptions in except handlers.", "correct_code": null, "problematic_code": null, "name": "wrong-exception-operation", "id": "W0716", "category": "warning", "href": "https://pylint.pycqa.org/en/latest/messages/warning/wrong-exception-operation.html"}, {"message": "Class method %s should have %s as first argument", "description": "Used when a class method has a first argument named differently than the value specified in valid-classmethod-first-arg option (default to \"cls\"), recommended to easily differentiate them from regular instance methods.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Klass</span><span class=\"p\">:</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_instance</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"p\">()</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Klass</span><span class=\"p\">:</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># [bad-classmethod-argument]</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">()</span>\n</pre></div>", "name": "bad-classmethod-argument", "id": "C0202", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/bad-classmethod-argument.html"}, {"message": "Bad docstring quotes in %s, expected \"\"\", given %s", "description": "Used when a docstring does not have triple double quotes.", "correct_code": null, "problematic_code": null, "name": "bad-docstring-quotes", "id": "C0198", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/bad-docstring-quotes.html"}, {"message": "PEP8 recommends UTF-8 as encoding for Python files", "description": "PEP8 recommends UTF-8 default encoding for Python files. See https://peps.python.org/pep-0008/#source-file-encoding", "correct_code": null, "problematic_code": null, "name": "bad-file-encoding", "id": "C2503", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/bad-file-encoding.html"}, {"message": "Metaclass class method %s should have %s as first argument", "description": "Used when a metaclass class method has a first argument named differently than the value specified in valid-metaclass-classmethod-first-arg option (default to \"mcs\"), recommended to easily differentiate them from regular instance methods.", "correct_code": null, "problematic_code": null, "name": "bad-mcs-classmethod-argument", "id": "C0204", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/bad-mcs-classmethod-argument.html"}, {"message": "Metaclass method %s should have %s as first argument", "description": "Used when a metaclass method has a first argument named differently than the value specified in valid-classmethod-first-arg option (default to \"cls\"), recommended to easily differentiate them from regular instance methods.", "correct_code": null, "problematic_code": null, "name": "bad-mcs-method-argument", "id": "C0203", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/bad-mcs-method-argument.html"}, {"message": "Avoid comparisons to empty string", "description": "Used when Pylint detects comparison to an empty string constant.", "correct_code": null, "problematic_code": null, "name": "compare-to-empty-string", "id": "C1901", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/compare-to-empty-string.html"}, {"message": "Avoid comparisons to zero", "description": "Used when Pylint detects comparison to a 0 constant.", "correct_code": null, "problematic_code": null, "name": "compare-to-zero", "id": "C2001", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/compare-to-zero.html"}, {"message": "Consider iterating the dictionary directly instead of calling .keys()", "description": "Emitted when the keys of a dictionary are iterated through the ``.keys()`` method or when ``.keys()`` is used for a membership check. It is enough to iterate through the dictionary itself, ``for key in dictionary``. For membership checks, ``if key in dictionary`` is faster.", "correct_code": null, "problematic_code": null, "name": "consider-iterating-dictionary", "id": "C0201", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/consider-iterating-dictionary.html"}, {"message": "for loop could be %s", "description": "A for loop that checks for a condition and return a bool can be replaced with any or all.", "correct_code": null, "problematic_code": null, "name": "consider-using-any-or-all", "id": "C0501", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/consider-using-any-or-all.html"}, {"message": "Consider iterating with .items()", "description": "Emitted when iterating over the keys of a dictionary and accessing the value by index lookup. Both the key and value can be accessed by iterating using the .items() method of the dictionary instead.", "correct_code": null, "problematic_code": null, "name": "consider-using-dict-items", "id": "C0206", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/consider-using-dict-items.html"}, {"message": "Consider using enumerate instead of iterating with range and len", "description": "Emitted when code that iterates with range and len is encountered. Such code can be simplified by using the enumerate builtin.", "correct_code": null, "problematic_code": null, "name": "consider-using-enumerate", "id": "C0200", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/consider-using-enumerate.html"}, {"message": "Formatting a regular string which could be a f-string", "description": "Used when we detect a string that is being formatted with format() or % which could potentially be a f-string. The use of f-strings is preferred. Requires Python 3.6 and ``py-version >= 3.6``.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">menu</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'eggs'</span><span class=\"p\">,</span> <span class=\"s1\">'spam'</span><span class=\"p\">,</span> <span class=\"mf\">42.4</span><span class=\"p\">)</span>\n\n<span class=\"n\">f_string_order</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">menu</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\"> and </span><span class=\"si\">{</span><span class=\"n\">menu</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">: </span><span class=\"si\">{</span><span class=\"n\">menu</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"si\">:</span><span class=\"s2\">0.2f</span><span class=\"si\">}</span><span class=\"s2\"> \u00a4\"</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">string</span> <span class=\"kn\">import</span> <span class=\"n\">Template</span>\n\n<span class=\"n\">menu</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'eggs'</span><span class=\"p\">,</span> <span class=\"s1\">'spam'</span><span class=\"p\">,</span> <span class=\"mf\">42.4</span><span class=\"p\">)</span>\n\n<span class=\"n\">old_order</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">%s</span><span class=\"s2\"> and </span><span class=\"si\">%s</span><span class=\"s2\">: </span><span class=\"si\">%.2f</span><span class=\"s2\"> \u00a4\"</span> <span class=\"o\">%</span> <span class=\"n\">menu</span> <span class=\"c1\"># [consider-using-f-string]</span>\n<span class=\"n\">beginner_order</span> <span class=\"o\">=</span> <span class=\"n\">menu</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s2\">\" and \"</span> <span class=\"o\">+</span> <span class=\"n\">menu</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s2\">\": \"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">menu</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"s2\">\" \u00a4\"</span>\n<span class=\"n\">joined_order</span> <span class=\"o\">=</span> <span class=\"s2\">\" and \"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">menu</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"n\">format_order</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">{}</span><span class=\"s2\"> and </span><span class=\"si\">{}</span><span class=\"s2\">: </span><span class=\"si\">{:0.2f}</span><span class=\"s2\"> \u00a4\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">menu</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">menu</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">menu</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"c1\"># [consider-using-f-string]</span>\n<span class=\"n\">named_format_order</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">{eggs}</span><span class=\"s2\"> and </span><span class=\"si\">{spam}</span><span class=\"s2\">: </span><span class=\"si\">{price:0.2f}</span><span class=\"s2\"> \u00a4\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">eggs</span><span class=\"o\">=</span><span class=\"n\">menu</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">spam</span><span class=\"o\">=</span><span class=\"n\">menu</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">price</span><span class=\"o\">=</span><span class=\"n\">menu</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"c1\"># [consider-using-f-string]</span>\n<span class=\"n\">template_order</span> <span class=\"o\">=</span> <span class=\"n\">Template</span><span class=\"p\">(</span><span class=\"s1\">'$eggs and $spam: $price \u00a4'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">substitute</span><span class=\"p\">(</span><span class=\"n\">eggs</span><span class=\"o\">=</span><span class=\"n\">menu</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">spam</span><span class=\"o\">=</span><span class=\"n\">menu</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">price</span><span class=\"o\">=</span><span class=\"n\">menu</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n</pre></div>", "name": "consider-using-f-string", "id": "C0209", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/consider-using-f-string.html"}, {"message": "Disallowed name \"%s\"", "description": "Used when the name matches bad-names or bad-names-rgxs- (unauthorized names).", "correct_code": null, "problematic_code": null, "name": "disallowed-name", "id": "C0104", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/disallowed-name.html"}, {"message": "First line empty in %s docstring", "description": "Used when a blank line is found at the beginning of a docstring.", "correct_code": null, "problematic_code": null, "name": "docstring-first-line-empty", "id": "C0199", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/docstring-first-line-empty.html"}, {"message": "Empty %s docstring", "description": "Used when a module, function, class or method has an empty docstring (it would be too easy ;).", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"A dummy description.\"\"\"</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>  <span class=\"c1\"># [empty-docstring]</span>\n    <span class=\"sd\">\"\"\"\"\"\"</span>\n</pre></div>", "name": "empty-docstring", "id": "C0112", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/empty-docstring.html"}, {"message": "Import outside toplevel (%s)", "description": "Used when an import statement is used anywhere other than the module toplevel. Move this import to the top of the file.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">print_python_version</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">version_info</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">print_python_version</span><span class=\"p\">():</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">sys</span>  <span class=\"c1\"># [import-outside-toplevel]</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">version_info</span><span class=\"p\">)</span>\n</pre></div>", "name": "import-outside-toplevel", "id": "C0415", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/import-outside-toplevel.html"}, {"message": "Imported private %s (%s)", "description": "Used when a private module or object prefixed with _ is imported. PEP8 guidance on Naming Conventions states that public attributes with leading underscores should be considered private.", "correct_code": null, "problematic_code": null, "name": "import-private-name", "id": "C2701", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/import-private-name.html"}, {"message": "Invalid characters %r in a docstring", "description": "Used when a word in docstring cannot be checked by enchant.", "correct_code": null, "problematic_code": null, "name": "invalid-characters-in-docstring", "id": "C0403", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/invalid-characters-in-docstring.html"}, {"message": "%s name \"%s\" doesn't conform to %s", "description": "Used when the name doesn't conform to naming rules associated to its type (constant, variable, class...).", "correct_code": null, "problematic_code": null, "name": "invalid-name", "id": "C0103", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/invalid-name.html"}, {"message": "Line too long (%s/%s)", "description": "Used when a line is longer than a given number of characters.", "correct_code": null, "problematic_code": null, "name": "line-too-long", "id": "C0301", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/line-too-long.html"}, {"message": "Comparison should be %s", "description": "Used when the constant is placed on the left side of a comparison. It is usually clearer in intent to place it in the right hand side of the comparison.", "correct_code": null, "problematic_code": null, "name": "misplaced-comparison-constant", "id": "C2201", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/misplaced-comparison-constant.html"}, {"message": "Missing class docstring", "description": "Used when a class has no docstring.Even an empty class must have a docstring.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Class representing a person\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">first_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">last_name</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">:</span>  <span class=\"c1\"># [missing-class-docstring]</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">first_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">last_name</span>\n</pre></div>", "name": "missing-class-docstring", "id": "C0115", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/missing-class-docstring.html"}, {"message": "Final newline missing", "description": "Used when the last line in a file is missing a newline.", "correct_code": null, "problematic_code": null, "name": "missing-final-newline", "id": "C0304", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/missing-final-newline.html"}, {"message": "Missing function or method docstring", "description": "Used when a function or method has no docstring.Some special methods like __init__ do not require a docstring.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">print_python_version</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"Function printing python version.\"\"\"</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">version</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">print_python_version</span><span class=\"p\">():</span>  <span class=\"c1\"># [missing-function-docstring]</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">version</span><span class=\"p\">)</span>\n</pre></div>", "name": "missing-function-docstring", "id": "C0116", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/missing-function-docstring.html"}, {"message": "Missing module docstring", "description": "Used when a module has no docstring.Empty modules do not require a docstring.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"sd\">\"\"\"Module providingFunction printing python version.\"\"\"</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">print_python_version</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">version</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">sys</span>  <span class=\"c1\"># [missing-module-docstring]</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">print_python_version</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">version</span><span class=\"p\">)</span>\n</pre></div>", "name": "missing-module-docstring", "id": "C0114", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/missing-module-docstring.html"}, {"message": "Mixed line endings LF and CRLF", "description": "Used when there are mixed (LF and CRLF) newline signs in a file.", "correct_code": null, "problematic_code": null, "name": "mixed-line-endings", "id": "C0327", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/mixed-line-endings.html"}, {"message": "Multiple imports on one line (%s)", "description": "Used when import statement importing multiple modules is detected.", "correct_code": null, "problematic_code": null, "name": "multiple-imports", "id": "C0410", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/multiple-imports.html"}, {"message": "More than one statement on a single line", "description": "Used when more than on statement are found on the same line.", "correct_code": null, "problematic_code": null, "name": "multiple-statements", "id": "C0321", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/multiple-statements.html"}, {"message": "%s name \"%s\" contains a non-ASCII character, use an ASCII-only alias for import.", "description": "Used when the name contains at least one non-ASCII unicode character. See https://peps.python.org/pep-0672/#confusing-features for a background why this could be bad.\nIf your programming guideline defines that you are programming in English, then there should be no need for non ASCII characters in Python Names. If not you can simply disable this check.", "correct_code": null, "problematic_code": null, "name": "non-ascii-module-import", "id": "C2403", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/non-ascii-module-import.html"}, {"message": "%s name \"%s\" contains a non-ASCII character, consider renaming it.", "description": "Used when the name contains at least one non-ASCII unicode character. See https://peps.python.org/pep-0672/#confusing-features for a background why this could be bad.\nIf your programming guideline defines that you are programming in English, then there should be no need for non ASCII characters in Python Names. If not you can simply disable this check.", "correct_code": null, "problematic_code": null, "name": "non-ascii-name", "id": "C2401", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/non-ascii-name.html"}, {"message": "Class __slots__ should be a non-string iterable", "description": "Used when a class __slots__ is a simple string, rather than an iterable.", "correct_code": null, "problematic_code": null, "name": "single-string-used-for-slots", "id": "C0205", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/single-string-used-for-slots.html"}, {"message": "Comparison %s should be %s", "description": "Used when an expression is compared to singleton values like True, False or None.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">game_won</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"k\">if</span> <span class=\"n\">game_won</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Game won !\"</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">game_won</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"k\">if</span> <span class=\"n\">game_won</span> <span class=\"o\">==</span> <span class=\"kc\">True</span><span class=\"p\">:</span>  <span class=\"c1\"># [singleton-comparison]</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Game won !\"</span><span class=\"p\">)</span>\n</pre></div>", "name": "singleton-comparison", "id": "C0121", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/singleton-comparison.html"}, {"message": "Unnecessary parens after %r keyword", "description": "Used when a single item in parentheses follows an if, for, or other keyword.", "correct_code": null, "problematic_code": null, "name": "superfluous-parens", "id": "C0325", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/superfluous-parens.html"}, {"message": "Too many lines in module (%s/%s)", "description": "Used when a module has too many lines, reducing its readability.", "correct_code": null, "problematic_code": null, "name": "too-many-lines", "id": "C0302", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/too-many-lines.html"}, {"message": "Trailing newlines", "description": "Used when there are trailing blank lines in a file.", "correct_code": null, "problematic_code": null, "name": "trailing-newlines", "id": "C0305", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/trailing-newlines.html"}, {"message": "Trailing whitespace", "description": "Used when there is whitespace between the end of a line and the newline.", "correct_code": null, "problematic_code": null, "name": "trailing-whitespace", "id": "C0303", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/trailing-whitespace.html"}, {"message": "TypeVar cannot be both covariant and contravariant", "description": "Emitted when both the \"covariant\" and \"contravariant\" keyword arguments are set to \"True\" in a TypeVar.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">TypeVar</span>\n\n<span class=\"n\">T_co</span> <span class=\"o\">=</span> <span class=\"n\">TypeVar</span><span class=\"p\">(</span><span class=\"s2\">\"T_co\"</span><span class=\"p\">,</span> <span class=\"n\">covariant</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">T_contra</span> <span class=\"o\">=</span> <span class=\"n\">TypeVar</span><span class=\"p\">(</span><span class=\"s2\">\"T_contra\"</span><span class=\"p\">,</span> <span class=\"n\">contravariant</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">TypeVar</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"n\">TypeVar</span><span class=\"p\">(</span><span class=\"s2\">\"T\"</span><span class=\"p\">,</span> <span class=\"n\">covariant</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">contravariant</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># [typevar-double-variance]</span>\n</pre></div>", "name": "typevar-double-variance", "id": "C0131", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/typevar-double-variance.html"}, {"message": "Type variable name does not reflect variance%s", "description": "Emitted when a TypeVar name doesn't reflect its type variance. According to PEP8, it is recommended to add suffixes '_co' and '_contra' to the variables used to declare covariant or contravariant behaviour respectively. Invariant (default) variables do not require a suffix. The message is also emitted when invariant variables do have a suffix.", "correct_code": null, "problematic_code": null, "name": "typevar-name-incorrect-variance", "id": "C0105", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/typevar-name-incorrect-variance.html"}, {"message": "TypeVar name \"%s\" does not match assigned variable name \"%s\"", "description": "Emitted when a TypeVar is assigned to a variable that does not match its name argument.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">TypeVar</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"n\">TypeVar</span><span class=\"p\">(</span><span class=\"s2\">\"T\"</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">TypeVar</span>\n\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">TypeVar</span><span class=\"p\">(</span><span class=\"s2\">\"T\"</span><span class=\"p\">)</span>  <span class=\"c1\"># [typevar-name-mismatch]</span>\n</pre></div>", "name": "typevar-name-mismatch", "id": "C0132", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/typevar-name-mismatch.html"}, {"message": "Unexpected line ending format. There is '%s' while it should be '%s'.", "description": "Used when there is different newline than expected.", "correct_code": null, "problematic_code": null, "name": "unexpected-line-ending-format", "id": "C0328", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/unexpected-line-ending-format.html"}, {"message": "Imports from package %s are not grouped", "description": "Used when imports are not grouped by packages", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging.config</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">from</span> <span class=\"nn\">logging.handlers</span> <span class=\"kn\">import</span> <span class=\"n\">FileHandler</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging.config</span>  <span class=\"c1\"># [ungrouped-imports]</span>\n<span class=\"kn\">from</span> <span class=\"nn\">logging.handlers</span> <span class=\"kn\">import</span> <span class=\"n\">WatchedFileHandler</span>\n</pre></div>", "name": "ungrouped-imports", "id": "C0412", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/ungrouped-imports.html"}, {"message": "Use isinstance() rather than type() for a typecheck.", "description": "The idiomatic way to perform an explicit typecheck in Python is to use isinstance(x, Y) rather than type(x) == Y, type(x) is Y. Though there are unusual situations where these give different results.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">test_score</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"Biology\"</span><span class=\"p\">:</span> <span class=\"mi\">95</span><span class=\"p\">,</span> <span class=\"s2\">\"History\"</span><span class=\"p\">:</span> <span class=\"mi\">80</span><span class=\"p\">}</span>\n<span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">test_score</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">test_score</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"Biology\"</span><span class=\"p\">:</span> <span class=\"mi\">95</span><span class=\"p\">,</span> <span class=\"s2\">\"History\"</span><span class=\"p\">:</span> <span class=\"mi\">80</span><span class=\"p\">}</span>\n<span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">test_score</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>  <span class=\"c1\"># [unidiomatic-typecheck]</span>\n    <span class=\"k\">pass</span>\n</pre></div>", "name": "unidiomatic-typecheck", "id": "C0123", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/unidiomatic-typecheck.html"}, {"message": "Unnecessarily calls dunder method %s. %s.", "description": "Used when a dunder method is manually called instead of using the corresponding function/method/operator.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">three</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"mf\">3.0</span><span class=\"p\">)</span>\n<span class=\"n\">twelve</span> <span class=\"o\">=</span> <span class=\"s2\">\"1\"</span> <span class=\"o\">+</span> <span class=\"s2\">\"2\"</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">is_bigger_than_two</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">three</span> <span class=\"o\">=</span> <span class=\"mf\">3.0</span><span class=\"o\">.</span><span class=\"fm\">__str__</span><span class=\"p\">()</span>  <span class=\"c1\"># [unnecessary-dunder-call]</span>\n<span class=\"n\">twelve</span> <span class=\"o\">=</span> <span class=\"s2\">\"1\"</span><span class=\"o\">.</span><span class=\"fm\">__add__</span><span class=\"p\">(</span><span class=\"s2\">\"2\"</span><span class=\"p\">)</span>  <span class=\"c1\"># [unnecessary-dunder-call]</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">is_bigger_than_two</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"fm\">__gt__</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># [unnecessary-dunder-call]</span>\n</pre></div>", "name": "unnecessary-dunder-call", "id": "C2801", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/unnecessary-dunder-call.html"}, {"message": "Consider changing \"%s\" to \"%s\"", "description": "Used when a boolean expression contains an unneeded negation.", "correct_code": null, "problematic_code": null, "name": "unneeded-not", "id": "C0113", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/unneeded-not.html"}, {"message": "'%s' can be simplified to '%s' as an empty sequence is falsey", "description": "Used when Pylint detects that collection literal comparison is being used to check for emptiness; Use implicit booleaness insteadof a collection classes; empty collections are considered as false", "correct_code": null, "problematic_code": null, "name": "use-implicit-booleaness-not-comparison", "id": "C1803", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/use-implicit-booleaness-not-comparison.html"}, {"message": "Do not use len(SEQUENCE) without comparison to determine if a sequence is empty", "description": "Used when Pylint detects that len(sequence) is being used without explicit comparison inside a condition to determine if a sequence is empty. Instead of coercing the length to a boolean, either rely on the fact that empty sequences are false or compare the length against a scalar.", "correct_code": null, "problematic_code": null, "name": "use-implicit-booleaness-not-len", "id": "C1802", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/use-implicit-booleaness-not-len.html"}, {"message": "Use %s instead", "description": "Emitted when accessing only the first or last element of str.split(). The first and last element can be accessed by using str.split(sep, maxsplit=1)[0] or str.rsplit(sep, maxsplit=1)[-1] instead.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"www.example.com\"</span>\n<span class=\"n\">suffix</span> <span class=\"o\">=</span> <span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">rsplit</span><span class=\"p\">(</span><span class=\"s2\">\".\"</span><span class=\"p\">,</span> <span class=\"n\">maxsplit</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"www.example.com\"</span>\n<span class=\"n\">suffix</span> <span class=\"o\">=</span> <span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">\".\"</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>  <span class=\"c1\"># [use-maxsplit-arg]</span>\n</pre></div>", "name": "use-maxsplit-arg", "id": "C0207", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/use-maxsplit-arg.html"}, {"message": "Use a sequence type when iterating over values", "description": "When iterating over values, sequence types (e.g., ``lists``, ``tuples``, ``ranges``) are more efficient than ``sets``.", "correct_code": null, "problematic_code": null, "name": "use-sequence-for-iteration", "id": "C0208", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/use-sequence-for-iteration.html"}, {"message": "Import alias does not rename original package", "description": "Used when an import alias is same as original package.e.g using import numpy as numpy instead of import numpy as np", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pandas</span>  <span class=\"c1\"># [useless-import-alias]</span>\n</pre></div>", "name": "useless-import-alias", "id": "C0414", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/useless-import-alias.html"}, {"message": "%s should be placed before %s", "description": "Used when PEP8 import order is not respected (standard imports first, then third-party libraries, then local imports)", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">pylint</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">utils</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">utils</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pylint</span>  <span class=\"c1\"># [wrong-import-order]</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>  <span class=\"c1\"># [wrong-import-order]</span>\n</pre></div>", "name": "wrong-import-order", "id": "C0411", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/wrong-import-order.html"}, {"message": "Import \"%s\" should be placed at the top of the module", "description": "Used when code and imports are mixed", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"n\">home</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'HOME'</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Home directory is </span><span class=\"si\">{</span><span class=\"n\">home</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"n\">home</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'HOME'</span><span class=\"p\">]</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>  <span class=\"c1\"># [wrong-import-position]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Home directory is </span><span class=\"si\">{</span><span class=\"n\">home</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span>\n</pre></div>", "name": "wrong-import-position", "id": "C0413", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/wrong-import-position.html"}, {"message": "Wrong spelling of a word '%s' in a comment:\n%s\n%s\nDid you mean: '%s'?", "description": "Used when a word in comment is not spelled correctly.", "correct_code": null, "problematic_code": null, "name": "wrong-spelling-in-comment", "id": "C0401", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/wrong-spelling-in-comment.html"}, {"message": "Wrong spelling of a word '%s' in a docstring:\n%s\n%s\nDid you mean: '%s'?", "description": "Used when a word in docstring is not spelled correctly.", "correct_code": null, "problematic_code": null, "name": "wrong-spelling-in-docstring", "id": "C0402", "category": "convention", "href": "https://pylint.pycqa.org/en/latest/messages/convention/wrong-spelling-in-docstring.html"}, {"message": "Simplify chained comparison between the operands", "description": "This message is emitted when pylint encounters boolean operation like\"a < b and b < c\", suggesting instead to refactor it to \"a < b < c\"", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">&lt;</span> <span class=\"n\">c</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"n\">b</span> <span class=\"ow\">and</span> <span class=\"n\">b</span> <span class=\"o\">&lt;</span> <span class=\"n\">c</span><span class=\"p\">:</span>  <span class=\"c1\"># [chained-comparison]</span>\n    <span class=\"k\">pass</span>\n</pre></div>", "name": "chained-comparison", "id": "R1716", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/chained-comparison.html"}, {"message": "Redundant comparison - %s", "description": "Used when something is compared against itself.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">is_an_orange</span><span class=\"p\">(</span><span class=\"n\">fruit</span><span class=\"p\">):</span>\n    <span class=\"n\">an_orange</span> <span class=\"o\">=</span> <span class=\"s2\">\"orange\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">an_orange</span> <span class=\"o\">==</span> <span class=\"n\">fruit</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">is_an_orange</span><span class=\"p\">(</span><span class=\"n\">fruit</span><span class=\"p\">):</span>\n    <span class=\"n\">an_orange</span> <span class=\"o\">=</span> <span class=\"s2\">\"orange\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">fruit</span> <span class=\"o\">==</span> <span class=\"n\">fruit</span>  <span class=\"c1\"># [comparison-with-itself]</span>\n</pre></div>", "name": "comparison-with-itself", "id": "R0124", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/comparison-with-itself.html"}, {"message": "Boolean condition '%s' will always evaluate to '%s'", "description": "Emitted when a boolean condition can be simplified to a constant value.", "correct_code": null, "problematic_code": null, "name": "condition-evals-to-constant", "id": "R1727", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/condition-evals-to-constant.html"}, {"message": "Consecutive elif with differing indentation level, consider creating a function to separate the inner elif", "description": "Used when an elif statement follows right after an indented block which itself ends with if or elif. It may not be ovious if the elif statement was willingly or mistakenly unindented. Extracting the indented if statement into a separate function might avoid confusion and prevent errors.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"c1\"># Option 1: add explicit 'else'</span>\n<span class=\"k\">def</span> <span class=\"nf\">myfunc</span><span class=\"p\">(</span><span class=\"n\">shall_continue</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">shall_exit</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">shall_continue</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s2\">\"Are you sure?\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"y\"</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Moving on.\"</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n    <span class=\"k\">elif</span> <span class=\"n\">shall_exit</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Exiting.\"</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Option 2: extract function</span>\n<span class=\"k\">def</span> <span class=\"nf\">user_confirmation</span><span class=\"p\">():</span>\n    <span class=\"k\">if</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s2\">\"Are you sure?\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"y\"</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Moving on.\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">myfunc2</span><span class=\"p\">(</span><span class=\"n\">shall_continue</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">shall_exit</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">shall_continue</span><span class=\"p\">:</span>\n        <span class=\"n\">user_confirmation</span><span class=\"p\">()</span>\n    <span class=\"k\">elif</span> <span class=\"n\">shall_exit</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Exiting.\"</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">myfunc</span><span class=\"p\">(</span><span class=\"n\">shall_continue</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">shall_exit</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">shall_continue</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s2\">\"Are you sure?\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"y\"</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Moving on.\"</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">shall_exit</span><span class=\"p\">:</span>  <span class=\"c1\"># [confusing-consecutive-elif]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Exiting.\"</span><span class=\"p\">)</span>\n</pre></div>", "name": "confusing-consecutive-elif", "id": "R5601", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/confusing-consecutive-elif.html"}, {"message": "Consider using alternative Union syntax instead of '%s'%s", "description": "Emitted when 'typing.Union' or 'typing.Optional' is used instead of the alternative Union syntax 'int | None'.", "correct_code": null, "problematic_code": null, "name": "consider-alternative-union-syntax", "id": "R6003", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/consider-alternative-union-syntax.html"}, {"message": "Consider merging these isinstance calls to isinstance(%s, (%s))", "description": "Used when multiple consecutive isinstance calls can be merged into one.", "correct_code": null, "problematic_code": null, "name": "consider-merging-isinstance", "id": "R1701", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/consider-merging-isinstance.html"}, {"message": "Consider using tuple unpacking for swapping variables", "description": "You do not have to use a temporary variable in order to swap variables. Using \"tuple unpacking\" to directly swap variables makes the intention more clear.", "correct_code": null, "problematic_code": null, "name": "consider-swap-variables", "id": "R1712", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/consider-swap-variables.html"}, {"message": "'%s' will be deprecated with PY39, consider using '%s' instead%s", "description": "Only emitted if 'runtime-typing=no' and a deprecated typing alias is used in a type annotation context in Python 3.7 or 3.8.", "correct_code": null, "problematic_code": null, "name": "consider-using-alias", "id": "R6002", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/consider-using-alias.html"}, {"message": "Use '%s' instead", "description": "Emitted when an if assignment is directly followed by an if statement and both can be combined by using an assignment expression ``:=``. Requires Python 3.8 and ``py-version >= 3.8``.", "correct_code": null, "problematic_code": null, "name": "consider-using-assignment-expr", "id": "R6103", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/consider-using-assignment-expr.html"}, {"message": "Consider using a dictionary comprehension", "description": "Emitted when we detect the creation of a dictionary using the dict() callable and a transient list. Although there is nothing syntactically wrong with this code, it is hard to read and can be simplified to a dict comprehension.Also it is faster since you don't need to create another transient list", "correct_code": null, "problematic_code": null, "name": "consider-using-dict-comprehension", "id": "R1717", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/consider-using-dict-comprehension.html"}, {"message": "Use 'from %s import %s' instead", "description": "Emitted when a submodule of a package is imported and aliased with the same name. E.g., instead of ``import concurrent.futures as futures`` use ``from concurrent import futures``", "correct_code": null, "problematic_code": null, "name": "consider-using-from-import", "id": "R0402", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/consider-using-from-import.html"}, {"message": "Consider using a generator instead '%s(%s)'", "description": "If your container can be large using a generator will bring better performance.", "correct_code": null, "problematic_code": null, "name": "consider-using-generator", "id": "R1728", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/consider-using-generator.html"}, {"message": "Consider using dict.get for getting values from a dict if a key is present or a default if not", "description": "Using the builtin dict.get for getting a value from a dictionary if a key is present or a default if not, is simpler and considered more idiomatic, although sometimes a bit slower", "correct_code": null, "problematic_code": null, "name": "consider-using-get", "id": "R1715", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/consider-using-get.html"}, {"message": "Consider merging these comparisons with \"in\" to %r", "description": "To check if a variable is equal to one of many values,combine the values into a tuple and check if the variable is contained \"in\" it instead of checking for equality against each of the values.This is faster and less verbose.", "correct_code": null, "problematic_code": null, "name": "consider-using-in", "id": "R1714", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/consider-using-in.html"}, {"message": "Consider using str.join(sequence) for concatenating strings from an iterable", "description": "Using str.join(sequence) is faster, uses less memory and increases readability compared to for-loop iteration.", "correct_code": null, "problematic_code": null, "name": "consider-using-join", "id": "R1713", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/consider-using-join.html"}, {"message": "Consider using '%s' instead of unnecessary if block", "description": "Using the max builtin instead of a conditional improves readability and conciseness.", "correct_code": null, "problematic_code": null, "name": "consider-using-max-builtin", "id": "R1731", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/consider-using-max-builtin.html"}, {"message": "Consider using '%s' instead of unnecessary if block", "description": "Using the min builtin instead of a conditional improves readability and conciseness.", "correct_code": null, "problematic_code": null, "name": "consider-using-min-builtin", "id": "R1730", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/consider-using-min-builtin.html"}, {"message": "Consider using namedtuple or dataclass for dictionary values", "description": "Emitted when dictionary values can be replaced by namedtuples or dataclass instances.", "correct_code": null, "problematic_code": null, "name": "consider-using-namedtuple-or-dataclass", "id": "R6101", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/consider-using-namedtuple-or-dataclass.html"}, {"message": "Consider using a set comprehension", "description": "Although there is nothing syntactically wrong with this code, it is hard to read and can be simplified to a set comprehension.Also it is faster since you don't need to create another transient list", "correct_code": null, "problematic_code": null, "name": "consider-using-set-comprehension", "id": "R1718", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/consider-using-set-comprehension.html"}, {"message": "Consider using sys.exit()", "description": "Instead of using exit() or quit(), consider using the sys.exit().", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s2\">\"Enter user name: \"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Hello, </span><span class=\"si\">{</span><span class=\"n\">user</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s2\">\"Enter user name: \"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Hello, </span><span class=\"si\">{</span><span class=\"n\">user</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># [consider-using-sys-exit]</span>\n</pre></div>", "name": "consider-using-sys-exit", "id": "R1722", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/consider-using-sys-exit.html"}, {"message": "Consider using ternary (%s)", "description": "Used when one of known pre-python 2.5 ternary syntax is used.", "correct_code": null, "problematic_code": null, "name": "consider-using-ternary", "id": "R1706", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/consider-using-ternary.html"}, {"message": "Consider using an in-place tuple instead of list", "description": "Only for style consistency! Emitted where an in-place defined ``list`` can be replaced by a ``tuple``. Due to optimizations by CPython, there is no performance benefit from it.", "correct_code": null, "problematic_code": null, "name": "consider-using-tuple", "id": "R6102", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/consider-using-tuple.html"}, {"message": "Consider using 'with' for resource-allocating operations", "description": "Emitted if a resource-allocating assignment or call may be replaced by a 'with' block. By using 'with' the release of the allocated resources is ensured even in the case of an exception.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"foo.txt\"</span><span class=\"p\">,</span> <span class=\"s2\">\"r\"</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">\"utf8\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n    <span class=\"n\">contents</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"foo.txt\"</span><span class=\"p\">,</span> <span class=\"s2\">\"r\"</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">\"utf8\"</span><span class=\"p\">)</span>  <span class=\"c1\"># [consider-using-with]</span>\n<span class=\"n\">contents</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre></div>", "name": "consider-using-with", "id": "R1732", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/consider-using-with.html"}, {"message": "Cyclic import (%s)", "description": "Used when a cyclic import between two or more modules is detected.", "correct_code": null, "problematic_code": null, "name": "cyclic-import", "id": "R0401", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/cyclic-import.html"}, {"message": "Similar lines in %s files\n%s", "description": "Indicates that a set of similar lines has been detected among multiple file. This usually means that the code should be refactored to avoid this duplication.", "correct_code": null, "problematic_code": null, "name": "duplicate-code", "id": "R0801", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/duplicate-code.html"}, {"message": "Consider using \"elif\" instead of \"else\" then \"if\" to remove one indentation level", "description": "Used when an else statement is immediately followed by an if statement and does not contain statements that would be unrelated to it.", "correct_code": null, "problematic_code": null, "name": "else-if-used", "id": "R5501", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/else-if-used.html"}, {"message": "Line with empty comment", "description": "Used when a # symbol appears on a line not followed by an actual comment", "correct_code": null, "problematic_code": null, "name": "empty-comment", "id": "R2044", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/empty-comment.html"}, {"message": "Either all return statements in a function should return an expression, or none of them should.", "description": "According to PEP8, if any return statement returns an expression, any return statements where no value is returned should explicitly state this as return None, and an explicit return statement should be present at the end of the function (if reachable)", "correct_code": null, "problematic_code": null, "name": "inconsistent-return-statements", "id": "R1710", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/inconsistent-return-statements.html"}, {"message": "Comparison to literal", "description": "Used when comparing an object to a literal, which is usually what you do not want to do, since you can compare to a different literal than what was expected altogether.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">is_an_orange</span><span class=\"p\">(</span><span class=\"n\">fruit</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">fruit</span> <span class=\"o\">==</span> <span class=\"s2\">\"orange\"</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">is_an_orange</span><span class=\"p\">(</span><span class=\"n\">fruit</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">fruit</span> <span class=\"ow\">is</span> <span class=\"s2\">\"orange\"</span> <span class=\"c1\"># [literal-comparison]</span>\n</pre></div>", "name": "literal-comparison", "id": "R0123", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/literal-comparison.html"}, {"message": "Consider using a decorator instead of calling classmethod", "description": "Used when a class method is defined without using the decorator syntax.", "correct_code": null, "problematic_code": null, "name": "no-classmethod-decorator", "id": "R0202", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/no-classmethod-decorator.html"}, {"message": "Unnecessary \"%s\" after \"break\", %s", "description": "Used in order to highlight an unnecessary block of code following an if containing a break statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a break statement.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">next_seven_elements</span><span class=\"p\">(</span><span class=\"n\">iterator</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">iterator</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">7</span><span class=\"p\">:</span>\n            <span class=\"k\">break</span>\n        <span class=\"k\">yield</span> <span class=\"n\">item</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">next_seven_elements</span><span class=\"p\">(</span><span class=\"n\">iterator</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">iterator</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">7</span><span class=\"p\">:</span>  <span class=\"c1\"># [no-else-break]</span>\n            <span class=\"k\">break</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"n\">item</span>\n</pre></div>", "name": "no-else-break", "id": "R1723", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/no-else-break.html"}, {"message": "Unnecessary \"%s\" after \"continue\", %s", "description": "Used in order to highlight an unnecessary block of code following an if containing a continue statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a continue statement.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">even_number_under</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"o\">%</span><span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n        <span class=\"k\">yield</span> <span class=\"n\">i</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">even_number_under</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"o\">%</span><span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>  <span class=\"c1\"># [no-else-continue]</span>\n            <span class=\"k\">continue</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"n\">i</span>\n</pre></div>", "name": "no-else-continue", "id": "R1724", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/no-else-continue.html"}, {"message": "Unnecessary \"%s\" after \"raise\", %s", "description": "Used in order to highlight an unnecessary block of code following an if containing a raise statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a raise statement.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">integer_sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">'Function supports only integer parameters.'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">integer_sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)):</span>    <span class=\"c1\"># [no-else-raise]</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">'Function supports only integer parameters.'</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</pre></div>", "name": "no-else-raise", "id": "R1720", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/no-else-raise.html"}, {"message": "Unnecessary \"%s\" after \"return\", %s", "description": "Used in order to highlight an unnecessary block of code following an if containing a return statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a return statement.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">compare_numbers</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"n\">b</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span>\n    <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"n\">b</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">compare_numbers</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"n\">b</span><span class=\"p\">:</span>  <span class=\"c1\"># [no-else-return]</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span>\n    <span class=\"k\">elif</span> <span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"n\">b</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span>\n</pre></div>", "name": "no-else-return", "id": "R1705", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/no-else-return.html"}, {"message": "Method could be a function", "description": "Used when a method doesn't use its bound instance, and so could be written as a function.", "correct_code": null, "problematic_code": null, "name": "no-self-use", "id": "R0201", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/no-self-use.html"}, {"message": "Consider using a decorator instead of calling staticmethod", "description": "Used when a static method is defined without using the decorator syntax.", "correct_code": null, "problematic_code": null, "name": "no-staticmethod-decorator", "id": "R0203", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/no-staticmethod-decorator.html"}, {"message": "Cannot have defined parameters for properties", "description": "Used when we detect that a property also has parameters, which are useless, given that properties cannot be called with additional arguments.", "correct_code": null, "problematic_code": null, "name": "property-with-parameters", "id": "R0206", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/property-with-parameters.html"}, {"message": "Redefining argument with the local name %r", "description": "Used when a local name is redefining an argument, which might suggest a potential error. This is taken in account only for a handful of name binding operations, such as for iteration, with statement assignment and exception handler assignment.", "correct_code": null, "problematic_code": null, "name": "redefined-argument-from-local", "id": "R1704", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/redefined-argument-from-local.html"}, {"message": "Redefinition of %s type from %s to %s", "description": "Used when the type of a variable changes inside a method or a function.", "correct_code": null, "problematic_code": null, "name": "redefined-variable-type", "id": "R0204", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/redefined-variable-type.html"}, {"message": "Boolean condition '%s' may be simplified to '%s'", "description": "Emitted when a boolean condition is able to be simplified.", "correct_code": null, "problematic_code": null, "name": "simplifiable-condition", "id": "R1726", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/simplifiable-condition.html"}, {"message": "The if expression can be replaced with %s", "description": "Used when an if expression can be replaced with 'bool(test)'.", "correct_code": null, "problematic_code": null, "name": "simplifiable-if-expression", "id": "R1719", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/simplifiable-if-expression.html"}, {"message": "The if statement can be replaced with %s", "description": "Used when an if statement can be replaced with 'bool(test)'.", "correct_code": null, "problematic_code": null, "name": "simplifiable-if-statement", "id": "R1703", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/simplifiable-if-statement.html"}, {"message": "Boolean expression may be simplified to %s", "description": "Emitted when redundant pre-python 2.5 ternary syntax is used.", "correct_code": null, "problematic_code": null, "name": "simplify-boolean-expression", "id": "R1709", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/simplify-boolean-expression.html"}, {"message": "Do not raise StopIteration in generator, use return statement instead", "description": "According to PEP479, the raise of StopIteration to end the loop of a generator may lead to hard to find bugs. This PEP specify that raise StopIteration has to be replaced by a simple return statement", "correct_code": null, "problematic_code": null, "name": "stop-iteration-return", "id": "R1708", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/stop-iteration-return.html"}, {"message": "Consider using Python 3 style super() without arguments", "description": "Emitted when calling the super() builtin with the current class and instance. On Python 3 these arguments are the default and they can be omitted.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Fruit</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Orange</span><span class=\"p\">(</span><span class=\"n\">Fruit</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Fruit</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Orange</span><span class=\"p\">(</span><span class=\"n\">Fruit</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">Orange</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>  <span class=\"c1\"># [super-with-arguments]</span>\n</pre></div>", "name": "super-with-arguments", "id": "R1725", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/super-with-arguments.html"}, {"message": "%s is too complex. The McCabe rating is %d", "description": "Used when a method or function is too complex based on McCabe Complexity Cyclomatic", "correct_code": null, "problematic_code": null, "name": "too-complex", "id": "R1260", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/too-complex.html"}, {"message": "Too few public methods (%s/%s)", "description": "Used when class has too few public methods, so be sure it's really worth it.", "correct_code": null, "problematic_code": null, "name": "too-few-public-methods", "id": "R0903", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/too-few-public-methods.html"}, {"message": "Too many ancestors (%s/%s)", "description": "Used when class has too many parent classes, try to reduce this to get a simpler (and so easier to use) class.", "correct_code": null, "problematic_code": null, "name": "too-many-ancestors", "id": "R0901", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/too-many-ancestors.html"}, {"message": "Too many arguments (%s/%s)", "description": "Used when a function or method takes too many arguments.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">ThreeDChessPiece</span><span class=\"p\">:</span>\n    <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">z</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">three_d_chess_move</span><span class=\"p\">(</span>\n    <span class=\"n\">white</span><span class=\"p\">:</span> <span class=\"n\">ThreeDChessPiece</span><span class=\"p\">,</span>\n    <span class=\"n\">black</span><span class=\"p\">:</span> <span class=\"n\">ThreeDChessPiece</span><span class=\"p\">,</span>\n    <span class=\"n\">blue</span><span class=\"p\">:</span> <span class=\"n\">ThreeDChessPiece</span><span class=\"p\">,</span>\n    <span class=\"n\">current_player</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">three_d_chess_move</span><span class=\"p\">(</span>  <span class=\"c1\"># [too-many-arguments]</span>\n    <span class=\"n\">x_white</span><span class=\"p\">,</span>\n    <span class=\"n\">y_white</span><span class=\"p\">,</span>\n    <span class=\"n\">z_white</span><span class=\"p\">,</span>\n    <span class=\"n\">piece_white</span><span class=\"p\">,</span>\n    <span class=\"n\">x_black</span><span class=\"p\">,</span>\n    <span class=\"n\">y_black</span><span class=\"p\">,</span>\n    <span class=\"n\">z_black</span><span class=\"p\">,</span>\n    <span class=\"n\">piece_black</span><span class=\"p\">,</span>\n    <span class=\"n\">x_blue</span><span class=\"p\">,</span>\n    <span class=\"n\">y_blue</span><span class=\"p\">,</span>\n    <span class=\"n\">z_blue</span><span class=\"p\">,</span>\n    <span class=\"n\">piece_blue</span><span class=\"p\">,</span>\n    <span class=\"n\">current_player</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre></div>", "name": "too-many-arguments", "id": "R0913", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/too-many-arguments.html"}, {"message": "Too many boolean expressions in if statement (%s/%s)", "description": "Used when an if statement contains too many boolean expressions.", "correct_code": null, "problematic_code": null, "name": "too-many-boolean-expressions", "id": "R0916", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/too-many-boolean-expressions.html"}, {"message": "Too many branches (%s/%s)", "description": "Used when a function or method has too many branches, making it hard to follow.", "correct_code": null, "problematic_code": null, "name": "too-many-branches", "id": "R0912", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/too-many-branches.html"}, {"message": "Too many instance attributes (%s/%s)", "description": "Used when class has too many instance attributes, try to reduce this to get a simpler (and so easier to use) class.", "correct_code": null, "problematic_code": null, "name": "too-many-instance-attributes", "id": "R0902", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/too-many-instance-attributes.html"}, {"message": "Too many local variables (%s/%s)", "description": "Used when a function or method has too many local variables.", "correct_code": null, "problematic_code": null, "name": "too-many-locals", "id": "R0914", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/too-many-locals.html"}, {"message": "Too many nested blocks (%s/%s)", "description": "Used when a function or a method has too many nested blocks. This makes the code less understandable and maintainable.", "correct_code": null, "problematic_code": null, "name": "too-many-nested-blocks", "id": "R1702", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/too-many-nested-blocks.html"}, {"message": "Too many public methods (%s/%s)", "description": "Used when class has too many public methods, try to reduce this to get a simpler (and so easier to use) class.", "correct_code": null, "problematic_code": null, "name": "too-many-public-methods", "id": "R0904", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/too-many-public-methods.html"}, {"message": "Too many return statements (%s/%s)", "description": "Used when a function or method has too many return statement, making it hard to follow.", "correct_code": null, "problematic_code": null, "name": "too-many-return-statements", "id": "R0911", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/too-many-return-statements.html"}, {"message": "Too many statements (%s/%s)", "description": "Used when a function or method has too many statements. You should then split it in smaller functions / methods.", "correct_code": null, "problematic_code": null, "name": "too-many-statements", "id": "R0915", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/too-many-statements.html"}, {"message": "Disallow trailing comma tuple", "description": "In Python, a tuple is actually created by the comma symbol, not by the parentheses. Unfortunately, one can actually create a tuple by misplacing a trailing comma, which can lead to potential weird bugs in your code. You should always use parentheses explicitly for creating a tuple.", "correct_code": null, "problematic_code": null, "name": "trailing-comma-tuple", "id": "R1707", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/trailing-comma-tuple.html"}, {"message": "Unnecessary use of a comprehension, use %s instead.", "description": "Instead of using an identity comprehension, consider using the list, dict or set constructor. It is faster and simpler.", "correct_code": null, "problematic_code": null, "name": "unnecessary-comprehension", "id": "R1721", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/unnecessary-comprehension.html"}, {"message": "Unnecessary dictionary index lookup, use '%s' instead", "description": "Emitted when iterating over the dictionary items (key-item pairs) and accessing the value by index lookup. The value can be accessed directly instead.", "correct_code": null, "problematic_code": null, "name": "unnecessary-dict-index-lookup", "id": "R1733", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/unnecessary-dict-index-lookup.html"}, {"message": "Unnecessary list index lookup, use '%s' instead", "description": "Emitted when iterating over an enumeration and accessing the value by index lookup. The value can be accessed directly instead.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">letters</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">letter</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">letters</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">letter</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">letters</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">letter</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">letters</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">letters</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">])</span>  <span class=\"c1\"># [unnecessary-list-index-lookup]</span>\n</pre></div>", "name": "unnecessary-list-index-lookup", "id": "R1736", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/unnecessary-list-index-lookup.html"}, {"message": "Use a generator instead '%s(%s)'", "description": "Comprehension inside of 'any' or 'all' is unnecessary. A generator would be sufficient and faster.", "correct_code": null, "problematic_code": null, "name": "use-a-generator", "id": "R1729", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/use-a-generator.html"}, {"message": "Consider using {} instead of dict()", "description": "Emitted when using dict() to create an empty dictionary instead of the literal {}. The literal is faster as it avoids an additional function call.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">empty_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">empty_dict</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">()</span>  <span class=\"c1\"># [use-dict-literal]</span>\n</pre></div>", "name": "use-dict-literal", "id": "R1735", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/use-dict-literal.html"}, {"message": "Consider using [] instead of list()", "description": "Emitted when using list() to create an empty list instead of the literal []. The literal is faster as it avoids an additional function call.", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">empty_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"n\">empty_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">()</span>  <span class=\"c1\"># [use-list-literal]</span>\n</pre></div>", "name": "use-list-literal", "id": "R1734", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/use-list-literal.html"}, {"message": "Consider using set for membership test", "description": "Membership tests are more efficient when performed on a lookup optimized datatype like ``sets``.", "correct_code": null, "problematic_code": null, "name": "use-set-for-membership", "id": "R6201", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/use-set-for-membership.html"}, {"message": "Class %r inherits from object, can be safely removed from bases in python3", "description": "Used when a class inherit from object, which under python3 is implicit, hence can be safely removed from bases.", "correct_code": null, "problematic_code": null, "name": "useless-object-inheritance", "id": "R0205", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/useless-object-inheritance.html"}, {"message": "Useless return at end of function or method", "description": "Emitted when a single \"return\" or \"return None\" statement is found at the end of function or method definition. This statement can safely be removed because Python will implicitly return None", "correct_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">print_python_version</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">version</span><span class=\"p\">)</span>\n</pre></div>", "problematic_code": "<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">print_python_version</span><span class=\"p\">():</span>  <span class=\"c1\"># [useless-return]</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">version</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"kc\">None</span>\n</pre></div>", "name": "useless-return", "id": "R1711", "category": "refactor", "href": "https://pylint.pycqa.org/en/latest/messages/refactor/useless-return.html"}, {"message": "Unable to consider inline option %r", "description": "Used when an inline option is either badly formatted or can't be used inside modules.", "correct_code": null, "problematic_code": null, "name": "bad-inline-option", "id": "I0010", "category": "information", "href": "https://pylint.pycqa.org/en/latest/messages/information/bad-inline-option.html"}, {"message": "%s %r has no %r member%s, but source is unavailable. Consider adding this module to extension-pkg-allow-list if you want to perform analysis based on run-time introspection of living objects.", "description": "Used when a variable is accessed for non-existent member of C extension. Due to unavailability of source static analysis is impossible, but it may be performed by introspecting living objects in run-time.", "correct_code": null, "problematic_code": null, "name": "c-extension-no-member", "id": "I1101", "category": "information", "href": "https://pylint.pycqa.org/en/latest/messages/information/c-extension-no-member.html"}, {"message": "Pragma \"%s\" is deprecated, use \"%s\" instead", "description": "Some inline pylint options have been renamed or reworked, only the most recent form should be used. NOTE:skip-all is only available with pylint >= 0.26", "correct_code": null, "problematic_code": null, "name": "deprecated-pragma", "id": "I0022", "category": "information", "href": "https://pylint.pycqa.org/en/latest/messages/information/deprecated-pragma.html"}, {"message": "Ignoring entire file", "description": "Used to inform that the file will not be checked", "correct_code": null, "problematic_code": null, "name": "file-ignored", "id": "I0013", "category": "information", "href": "https://pylint.pycqa.org/en/latest/messages/information/file-ignored.html"}, {"message": "Locally disabling %s (%s)", "description": "Used when an inline option disables a message or a messages category.", "correct_code": null, "problematic_code": null, "name": "locally-disabled", "id": "I0011", "category": "information", "href": "https://pylint.pycqa.org/en/latest/messages/information/locally-disabled.html"}, {"message": "Unable to run raw checkers on built-in module %s", "description": "Used to inform that a built-in module has not been checked using the raw checkers.", "correct_code": null, "problematic_code": null, "name": "raw-checker-failed", "id": "I0001", "category": "information", "href": "https://pylint.pycqa.org/en/latest/messages/information/raw-checker-failed.html"}, {"message": "Suppressed %s (from line %d)", "description": "A message was triggered on a line, but suppressed explicitly by a disable= comment in the file. This message is not generated for messages that are ignored due to configuration settings.", "correct_code": null, "problematic_code": null, "name": "suppressed-message", "id": "I0020", "category": "information", "href": "https://pylint.pycqa.org/en/latest/messages/information/suppressed-message.html"}, {"message": "%s", "description": "Used when a message is enabled or disabled by id.", "correct_code": null, "problematic_code": null, "name": "use-symbolic-message-instead", "id": "I0023", "category": "information", "href": "https://pylint.pycqa.org/en/latest/messages/information/use-symbolic-message-instead.html"}, {"message": "Useless suppression of %s", "description": "Reported when a message is explicitly disabled for a line or a block of code, but never triggered.", "correct_code": null, "problematic_code": null, "name": "useless-suppression", "id": "I0021", "category": "information", "href": "https://pylint.pycqa.org/en/latest/messages/information/useless-suppression.html"}]